/**
 * Demo showcasing the type system and calculations
 * This recreates parts of the game example from the design document
 */

import {
  StatType,
  GrowthRate,
  SummonCard,
  SummonUnit,
  CardType,
  Rarity
} from './types';
import {
  calculateAllStats,
  DERIVED_STATS,
  calculateBasicAttackDamage
} from './engine';
import { GAME_DATA } from './data';

// ============================================================================
// DEMO: CREATING SUMMON CARDS
// ============================================================================

/**
 * Create a Gignen Warrior summon card like from the game example
 */
export function createGignenWarriorDemo(): SummonCard {
  const gignenSpecies = GAME_DATA.species.gignen;
  
  return {
    id: 'demo-gignen-warrior-001',
    name: 'Gignen Warrior',
    description: 'A sturdy Gignen fighter with balanced growth potential.',
    cardType: CardType.SUMMON,
    rarity: Rarity.COMMON,
    speciesId: gignenSpecies.id,
    baseStats: gignenSpecies.baseStats,
    // Example growth rates from the game story
    growthRates: {
      [StatType.STR]: GrowthRate.GRADUAL,    // 1.33
      [StatType.END]: GrowthRate.NORMAL,     // 1.0
      [StatType.DEF]: GrowthRate.NORMAL,     // 1.0  
      [StatType.INT]: GrowthRate.STEADY,     // 0.66
      [StatType.SPI]: GrowthRate.NORMAL,     // 1.0
      [StatType.MDF]: GrowthRate.STEADY,     // 0.66
      [StatType.SPD]: GrowthRate.MINIMAL,    // 0.5
      [StatType.ACC]: GrowthRate.STEADY,     // 0.66
      [StatType.LCK]: GrowthRate.EXCEPTIONAL // 2.0
    },
    generatedAt: new Date(),
    effects: [],
    triggers: [],
    tags: ['gignen', 'warrior', 'balanced']
  };
}

/**
 * Create a summon unit from a summon card at a specific level
 */
export function createSummonUnit(
  summonCard: SummonCard, 
  level: number,
  playerId: string,
  position: { x: number, y: number }
): SummonUnit {
  const warriorRole = GAME_DATA.roles.warrior;
  const heirloomSword = GAME_DATA.equipment.heirloom_sword;
  
  // Calculate current stats at this level
  const currentStats = calculateAllStats(
    summonCard.baseStats,
    summonCard.growthRates,
    level,
    warriorRole.statModifiers,
    heirloomSword.statBonuses
  );
  
  // Calculate derived stats
  const maxHp = DERIVED_STATS.maxHp(currentStats[StatType.END]);
  
  return {
    id: `unit-${summonCard.id}-${Date.now()}`,
    name: `${summonCard.name} (Level ${level})`,
    originalCardId: summonCard.id,
    playerId,
    position,
    level,
    currentHp: maxHp, // Start at full HP
    maxHp,
    currentStats,
    baseStats: summonCard.baseStats,
    growthRates: summonCard.growthRates,
    currentRole: warriorRole.id,
    equipment: {
      weapon: heirloomSword.id
    },
    statusEffects: [],
    movementUsed: 0,
    hasAttacked: false,
    temporaryModifiers: []
  };
}

// ============================================================================
// DEMO: COMBAT CALCULATION
// ============================================================================

/**
 * Simulate the Tempest Slash attack from Turn 5 of the game example
 */
export function simulateTempestSlashAttack(): void {
  console.log('=== Tempest Slash Attack Simulation ===');
  
  // Create the attacking Gignen Berserker (level 12 in the example)
  const gignenCard = createGignenWarriorDemo();
  const berserker = createSummonUnit(gignenCard, 12, 'player-a', { x: 4, y: 11 });
  
  // The berserker role has different stat modifiers
  const berserkerRole = GAME_DATA.roles.berserker;
  berserker.currentStats = calculateAllStats(
    gignenCard.baseStats,
    gignenCard.growthRates,
    12,
    berserkerRole.statModifiers,
    { [StatType.STR]: 1 } // Heirloom sword bonus
  );
  
  console.log('Attacker Stats:', {
    STR: berserker.currentStats[StatType.STR],
    ACC: berserker.currentStats[StatType.ACC],
    LCK: berserker.currentStats[StatType.LCK]
  });
  
  // Create the target Fae Magician (level 6 in the example)
  const faeSpecies = GAME_DATA.species.fae;
  const magicianRole = GAME_DATA.roles.magician;
  
  const targetStats = calculateAllStats(
    faeSpecies.baseStats,
    {
      [StatType.STR]: GrowthRate.NORMAL,
      [StatType.END]: GrowthRate.NORMAL,
      [StatType.DEF]: GrowthRate.NORMAL,
      [StatType.INT]: GrowthRate.GRADUAL,
      [StatType.SPI]: GrowthRate.GRADUAL,
      [StatType.MDF]: GrowthRate.NORMAL,
      [StatType.SPD]: GrowthRate.NORMAL,
      [StatType.ACC]: GrowthRate.GRADUAL,
      [StatType.LCK]: GrowthRate.NORMAL
    },
    6,
    magicianRole.statModifiers
  );
  
  console.log('Target Stats:', {
    DEF: targetStats[StatType.DEF],
    MDF: targetStats[StatType.MDF]
  });
  
  // Simulate the attack sequence from the example
  const attackerSTR = berserker.currentStats[StatType.STR]; // Should be 44
  const attackerACC = berserker.currentStats[StatType.ACC];
  const targetDEF = targetStats[StatType.DEF]; // Should be 16
  const weaponPower = 40; // Enhanced heirloom sword (30 + 10 from Sharpened Blade)
  
  // Check if attack hits
  const hitChance = 90 + (attackerACC / 10);
  console.log(`Hit chance: ${hitChance.toFixed(1)}%`);
  
  // Check for critical
  const critChance = DERIVED_STATS.criticalHitChance(berserker.currentStats[StatType.LCK]);
  console.log(`Crit chance: ${critChance}%`);
  
  // Calculate weapon damage
  const weaponDamage = calculateBasicAttackDamage(
    attackerSTR,
    weaponPower,
    targetDEF,
    false // Not crit in the example
  );
  
  // Calculate Tempest Slash additional damage
  const tempestDamage = Math.floor(
    attackerSTR * (1 + 30 / 100) * (attackerSTR / targetDEF)
  );
  
  const totalDamage = weaponDamage + tempestDamage;
  
  console.log('Damage Breakdown:');
  console.log(`- Weapon damage: ${weaponDamage}`);
  console.log(`- Tempest Slash: ${tempestDamage}`);
  console.log(`- Total damage: ${totalDamage}`);
  console.log('Expected from example: 326 (169 + 157)');
}

// ============================================================================
// DEMO: STAT PROGRESSION
// ============================================================================

/**
 * Show how a summon's stats progress from level 5 to 20
 */
export function demonstrateStatProgression(): void {
  console.log('\n=== Stat Progression Demo ===');
  
  const gignenCard = createGignenWarriorDemo();
  const warriorRole = GAME_DATA.roles.warrior;
  
  console.log('Gignen Warrior stat progression (with Warrior role):');
  console.log('Level | STR | END | DEF | HP  | MV');
  console.log('------|-----|-----|-----|-----|---');
  
  for (let level = 5; level <= 20; level += 5) {
    const stats = calculateAllStats(
      gignenCard.baseStats,
      gignenCard.growthRates,
      level,
      warriorRole.statModifiers
    );
    
    const hp = DERIVED_STATS.maxHp(stats[StatType.END]);
    const mv = DERIVED_STATS.movementSpeed(stats[StatType.SPD]);
    
    console.log(
      `${level.toString().padStart(5)} | ` +
      `${stats[StatType.STR].toString().padStart(3)} | ` +
      `${stats[StatType.END].toString().padStart(3)} | ` +
      `${stats[StatType.DEF].toString().padStart(3)} | ` +
      `${hp.toString().padStart(3)} | ` +
      `${mv.toString().padStart(2)}`
    );
  }
}

// ============================================================================
// DEMO RUNNER
// ============================================================================

/**
 * Run all demos
 */
export function runAllDemos(): void {
  console.log('ðŸŽ® Card Game Demo System');
  console.log('========================\n');
  
  demonstrateStatProgression();
  simulateTempestSlashAttack();
  
  console.log('\nâœ… All demos completed!');
}

// Export for external use
export { runAllDemos as default };
