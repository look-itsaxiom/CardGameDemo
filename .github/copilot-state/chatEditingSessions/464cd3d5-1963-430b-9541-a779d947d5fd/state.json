{"version":2,"sessionId":"464cd3d5-1963-430b-9541-a779d947d5fd","linearHistory":[{"requestId":"request_202e976f-b249-45e9-92cd-d22535289018","stops":[{"entries":[]}]},{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","stops":[{"entries":[{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/core.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/types/core.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/cards.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/types/cards.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}}]},{"stopId":"88d7ed8f-3073-47d1-8d98-fa1904289634","entries":[{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/cards.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"430a6d0","originalToCurrentEdit":[{"txt":"/**\r\n * Card type definitions for all card types in the game\r\n * This includes the data structures for cards and their effects\r\n */\r\n\r\nimport {\r\n  Entity,\r\n  EntityId,\r\n  Rarity,\r\n  CardType,\r\n  EquipmentSlot,\r\n  Speed,\r\n  DamageType,\r\n  DamageAttribute,\r\n  Stats,\r\n  GrowthRates,\r\n  Coordinate,\r\n  Percentage\r\n} from './core';\r\n\r\n// ============================================================================\r\n// EFFECT SYSTEM TYPES\r\n// ============================================================================\r\n\r\n/** Base interface for all card effects */\r\nexport interface Effect {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  speed: Speed;\r\n  /** Conditions that must be met to play/activate this effect */\r\n  requirements: EffectRequirement[];\r\n  /** What happens when this effect resolves */\r\n  resolution: EffectResolution;\r\n}\r\n\r\n/** Requirement types for playing cards or activating effects */\r\nexport interface EffectRequirement {\r\n  type: 'SUMMON_IN_PLAY' | 'SUMMON_ROLE' | 'SUMMON_LEVEL' | 'SUMMON_SPECIES' | \r\n        'TERRITORY_CONTROL' | 'CARD_IN_HAND' | 'CUSTOM';\r\n  parameters: Record<string, any>;\r\n  description: string;\r\n}\r\n\r\n/** What happens when an effect resolves */\r\nexport interface EffectResolution {\r\n  type: 'DAMAGE' | 'HEAL' | 'STAT_MODIFIER' | 'MOVEMENT' | 'SUMMON' | \r\n        'DRAW_CARDS' | 'LEVEL_UP' | 'DESTROY' | 'CUSTOM';\r\n  parameters: Record<string, any>;\r\n  targetType: 'SINGLE' | 'MULTIPLE' | 'ALL' | 'AREA';\r\n}\r\n\r\n/** Trigger conditions for automatic effects */\r\nexport interface Trigger {\r\n  event: 'ON_PLAY' | 'ON_DEFEAT' | 'ON_DAMAGE' | 'ON_HEAL' | 'ON_MOVE' | \r\n         'TURN_START' | 'TURN_END' | 'PHASE_START' | 'PHASE_END' | 'CUSTOM';\r\n  conditions?: EffectRequirement[];\r\n  effect: Effect;\r\n}\r\n\r\n// ============================================================================\r\n// BASE CARD INTERFACE\r\n// ============================================================================\r\n\r\n/** Base interface for all cards */\r\nexport interface BaseCard extends Entity {\r\n  cardType: CardType;\r\n  rarity: Rarity;\r\n  /** Visual representation data */\r\n  artwork?: string;\r\n  /** Card effects and abilities */\r\n  effects: Effect[];\r\n  /** Automatic triggers */\r\n  triggers: Trigger[];\r\n  /** Cost to play the card (if applicable) */\r\n  cost?: number;\r\n  /** Tags for categorization and searching */\r\n  tags: string[];\r\n}\r\n\r\n// ============================================================================\r\n// SUMMON CARDS\r\n// ============================================================================\r\n\r\n/** Species definition for summon generation */\r\nexport interface SummonSpecies extends Entity {\r\n  /** Base stats for this species */\r\n  baseStats: Stats;\r\n  /** Visual representation */\r\n  artwork: string;\r\n  /** Species-specific abilities */\r\n  speciesAbilities: Effect[];\r\n}\r\n\r\n/** Generated summon card (unique instance) */\r\nexport interface SummonCard extends BaseCard {\r\n  cardType: CardType.SUMMON;\r\n  /** Reference to the species template */\r\n  speciesId: EntityId;\r\n  /** Generated stats for this specific summon */\r\n  baseStats: Stats;\r\n  /** Generated growth rates for this specific summon */\r\n  growthRates: GrowthRates;\r\n  /** Generated at pack opening time */\r\n  generatedAt: Date;\r\n}\r\n\r\n// ============================================================================\r\n// ROLE CARDS\r\n// ============================================================================\r\n\r\n/** Role cards define class/job for summons */\r\nexport interface RoleCard extends BaseCard {\r\n  cardType: CardType.ROLE;\r\n  /** Tier level of this role (1 = basic, 2+ = advanced) */\r\n  tier: number;\r\n  /** Stat modifiers applied when this role is active */\r\n  statModifiers: Partial<Stats>;\r\n  /** Role-specific abilities */\r\n  roleAbilities: Effect[];\r\n}\r\n\r\n// ============================================================================\r\n// EQUIPMENT CARDS\r\n// ============================================================================\r\n\r\n/** Equipment cards enhance summons */\r\nexport interface EquipmentCard extends BaseCard {\r\n  cardType: CardType.EQUIPMENT;\r\n  /** Which slot this equipment occupies */\r\n  slot: EquipmentSlot;\r\n  /** Stat bonuses provided */\r\n  statBonuses: Partial<Stats>;\r\n  /** Base power for weapons */\r\n  basePower?: number;\r\n  /** Attack range for weapons */\r\n  attackRange?: number;\r\n  /** Equipment-specific abilities */\r\n  equipmentAbilities: Effect[];\r\n}\r\n\r\n// ============================================================================\r\n// ACTION CARDS\r\n// ============================================================================\r\n\r\n/** Action cards are played during action phase */\r\nexport interface ActionCard extends BaseCard {\r\n  cardType: CardType.ACTION;\r\n  /** Where this card goes after resolution */\r\n  destinationAfterUse: 'DISCARD' | 'RECHARGE' | 'REMOVED';\r\n  /** Main effect of the action */\r\n  actionEffect: Effect;\r\n}\r\n\r\n// ============================================================================\r\n// BUILDING CARDS\r\n// ============================================================================\r\n\r\n/** Building cards create permanent effects on the board */\r\nexport interface BuildingCard extends BaseCard {\r\n  cardType: CardType.BUILDING;\r\n  /** Size requirements for placement */\r\n  dimensions: {\r\n    width: number;\r\n    height: number;\r\n  };\r\n  /** Is this building placed face down initially? */\r\n  isHidden: boolean;\r\n  /** Ongoing effects while in play */\r\n  ongoingEffects: Effect[];\r\n  /** Destruction conditions */\r\n  destructionConditions?: EffectRequirement[];\r\n}\r\n\r\n// ============================================================================\r\n// QUEST CARDS\r\n// ============================================================================\r\n\r\n/** Quest cards provide objectives for rewards */\r\nexport interface QuestCard extends BaseCard {\r\n  cardType: CardType.QUEST;\r\n  /** Objective that must be completed */\r\n  objective: EffectRequirement;\r\n  /** Reward for completing the quest */\r\n  reward: Effect;\r\n  /** Can this quest be completed multiple times? */\r\n  repeatable: boolean;\r\n}\r\n\r\n// ============================================================================\r\n// COUNTER AND REACTION CARDS\r\n// ============================================================================\r\n\r\n/** Counter cards respond to specific triggers */\r\nexport interface CounterCard extends BaseCard {\r\n  cardType: CardType.COUNTER;\r\n  /** Must be set face down before activation */\r\n  mustBeSet: true;\r\n  /** Specific trigger that allows activation */\r\n  activationTrigger: Trigger;\r\n  /** Additional cost to activate */\r\n  activationCost?: Effect;\r\n}\r\n\r\n/** Reaction cards provide quick responses */\r\nexport interface ReactionCard extends BaseCard {\r\n  cardType: CardType.REACTION;\r\n  /** Can be played from hand or set face down */\r\n  canPlayFromHand: boolean;\r\n  /** Quick response effect */\r\n  reactionEffect: Effect;\r\n}\r\n\r\n// ============================================================================\r\n// ADVANCE CARDS\r\n// ============================================================================\r\n\r\n/** Advance cards evolve summons to higher tiers */\r\nexport interface AdvanceCard extends BaseCard {\r\n  cardType: CardType.ADVANCE;\r\n  /** Requirements for the target summon */\r\n  summonRequirements: EffectRequirement[];\r\n  /** New role granted by advancement */\r\n  newRole: RoleCard;\r\n  /** Additional effects from advancement */\r\n  advancementEffects: Effect[];\r\n}\r\n\r\n// ============================================================================\r\n// UNION TYPE FOR ALL CARDS\r\n// ============================================================================\r\n\r\n/** Union type representing any card in the game */\r\nexport type Card = \r\n  | SummonCard\r\n  | RoleCard\r\n  | EquipmentCard\r\n  | ActionCard\r\n  | BuildingCard\r\n  | QuestCard\r\n  | CounterCard\r\n  | ReactionCard\r\n  | AdvanceCard;\r\n\r\n// ============================================================================\r\n// CARD COLLECTION TYPES\r\n// ============================================================================\r\n\r\n/** Player's card collection */\r\nexport interface CardCollection {\r\n  playerId: EntityId;\r\n  cards: Map<EntityId, Card>;\r\n  /** Quick lookup by card type */\r\n  cardsByType: Map<CardType, EntityId[]>;\r\n  /** Quick lookup by rarity */\r\n  cardsByRarity: Map<Rarity, EntityId[]>;\r\n}\r\n\r\n/** Deck composition for a game */\r\nexport interface Deck {\r\n  playerId: EntityId;\r\n  name: string;\r\n  /** The 3 summon slots */\r\n  summonSlots: SummonSlot[];\r\n  /** Main deck cards */\r\n  mainDeck: EntityId[];\r\n  /** Advance deck cards */\r\n  advanceDeck: EntityId[];\r\n  /** When this deck was created/modified */\r\n  lastModified: Date;\r\n}\r\n\r\n/** A single summon slot configuration */\r\nexport interface SummonSlot {\r\n  /** The primary summon card */\r\n  summon: EntityId;\r\n  /** The role card applied */\r\n  role: EntityId;\r\n  /** Equipment in each slot */\r\n  equipment: {\r\n    [EquipmentSlot.WEAPON]?: EntityId;\r\n    [EquipmentSlot.OFFHAND]?: EntityId;\r\n    [EquipmentSlot.ARMOR]?: EntityId;\r\n    [EquipmentSlot.ACCESSORY]?: EntityId;\r\n  };\r\n}\r\n\r\n// ============================================================================\r\n// CARD GENERATION TYPES\r\n// ============================================================================\r\n\r\n/** Configuration for generating summon cards */\r\nexport interface SummonGenerationConfig {\r\n  species: SummonSpecies;\r\n  rarity: Rarity;\r\n  /** Probability tables for growth rates by rarity */\r\n  growthRateProbabilities: Record<Rarity, Record<GrowthRate, Percentage>>;\r\n}\r\n\r\n/** Pack opening configuration */\r\nexport interface PackConfig {\r\n  name: string;\r\n  cardCount: number;\r\n  rarityDistribution: Record<Rarity, Percentage>;\r\n  availableSpecies: EntityId[];\r\n  cost: number; // in-game currency\r\n}\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/types/cards.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%2288d7ed8f-3073-47d1-8d98-fa1904289634%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/game-state.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/types/game-state.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%2288d7ed8f-3073-47d1-8d98-fa1904289634%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}}]},{"stopId":"5b4a5bb3-2cfa-4da5-8283-770f623e6461","entries":[{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/game-state.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"b5ee352","originalToCurrentEdit":[{"txt":"/**\r\n * Game state types for managing the active game session\r\n * This includes the board state, player state, and turn management\r\n */\r\n\r\nimport {\r\n  Entity,\r\n  EntityId,\r\n  Player,\r\n  TurnPhase,\r\n  Zone,\r\n  Coordinate,\r\n  Stats,\r\n  GrowthRates,\r\n  BOARD_CONFIG\r\n} from './core';\r\nimport { Card, Deck, SummonSlot } from './cards';\r\n\r\n// ============================================================================\r\n// SUMMON UNIT (IN-PLAY SUMMON)\r\n// ============================================================================\r\n\r\n/** A summon unit that exists on the game board */\r\nexport interface SummonUnit extends Entity {\r\n  /** Reference to the original summon card */\r\n  originalCardId: EntityId;\r\n  /** Current owner */\r\n  playerId: EntityId;\r\n  /** Current position on the board */\r\n  position: Coordinate;\r\n  /** Current level (5-20) */\r\n  level: number;\r\n  /** Current HP */\r\n  currentHp: number;\r\n  /** Maximum HP at current level */\r\n  maxHp: number;\r\n  /** Current calculated stats */\r\n  currentStats: Stats;\r\n  /** Base stats from the original card */\r\n  baseStats: Stats;\r\n  /** Growth rates from the original card */\r\n  growthRates: GrowthRates;\r\n  /** Currently equipped role */\r\n  currentRole: EntityId;\r\n  /** Currently equipped items */\r\n  equipment: {\r\n    weapon?: EntityId;\r\n    offhand?: EntityId;\r\n    armor?: EntityId;\r\n    accessory?: EntityId;\r\n  };\r\n  /** Active status effects */\r\n  statusEffects: StatusEffect[];\r\n  /** Movement used this turn */\r\n  movementUsed: number;\r\n  /** Has attacked this turn */\r\n  hasAttacked: boolean;\r\n  /** Temporary modifiers from card effects */\r\n  temporaryModifiers: TemporaryModifier[];\r\n}\r\n\r\n/** Status effects that can be applied to summon units */\r\nexport interface StatusEffect {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  /** How many turns remaining */\r\n  duration: number;\r\n  /** Stat modifiers */\r\n  statModifiers?: Partial<Stats>;\r\n  /** Special conditions */\r\n  conditions?: {\r\n    immobilized?: boolean;\r\n    cannotAttack?: boolean;\r\n    cannotUseAbilities?: boolean;\r\n  };\r\n  /** Source of this effect */\r\n  sourceId: EntityId;\r\n}\r\n\r\n/** Temporary modifiers from card effects */\r\nexport interface TemporaryModifier {\r\n  id: string;\r\n  name: string;\r\n  /** When this modifier expires */\r\n  expiresAt: 'END_OF_TURN' | 'END_OF_OPPONENT_TURN' | 'PERMANENT' | number;\r\n  /** Stat changes */\r\n  statModifiers?: Partial<Stats>;\r\n  /** Other property changes */\r\n  propertyModifiers?: Record<string, any>;\r\n  /** Source of this modifier */\r\n  sourceId: EntityId;\r\n}\r\n\r\n// ============================================================================\r\n// BOARD STATE\r\n// ============================================================================\r\n\r\n/** A space on the game board */\r\nexport interface BoardSpace {\r\n  coordinate: Coordinate;\r\n  /** Which player controls this territory (if any) */\r\n  controlledBy?: EntityId;\r\n  /** Summon unit occupying this space (if any) */\r\n  occupiedBy?: EntityId;\r\n  /** Buildings covering this space */\r\n  buildings: EntityId[];\r\n  /** Is this space valid for summon placement */\r\n  isValidSummonSpace: boolean;\r\n  /** Special terrain effects */\r\n  terrainEffects?: string[];\r\n}\r\n\r\n/** The complete game board state */\r\nexport interface GameBoard {\r\n  /** 12x14 grid of spaces */\r\n  spaces: BoardSpace[][];\r\n  /** Active summon units on the board */\r\n  summonUnits: Map<EntityId, SummonUnit>;\r\n  /** Active buildings on the board */\r\n  buildings: Map<EntityId, ActiveBuilding>;\r\n}\r\n\r\n/** A building that has been played and is active on the board */\r\nexport interface ActiveBuilding extends Entity {\r\n  /** Reference to the original building card */\r\n  originalCardId: EntityId;\r\n  /** Player who controls this building */\r\n  playerId: EntityId;\r\n  /** Spaces this building occupies */\r\n  occupiedSpaces: Coordinate[];\r\n  /** Is this building face down (hidden)? */\r\n  isHidden: boolean;\r\n  /** Turn when this building was played */\r\n  playedOnTurn: number;\r\n  /** Active timers for destruction */\r\n  destructionTimers?: {\r\n    type: 'TURN_COUNT' | 'CONDITION';\r\n    value: number;\r\n  }[];\r\n}\r\n\r\n// ============================================================================\r\n// PLAYER GAME STATE\r\n// ============================================================================\r\n\r\n/** A player's state during an active game */\r\nexport interface PlayerGameState {\r\n  player: Player;\r\n  /** Cards in different zones */\r\n  zones: {\r\n    [Zone.HAND]: EntityId[];\r\n    [Zone.MAIN_DECK]: EntityId[];\r\n    [Zone.ADVANCE_DECK]: EntityId[];\r\n    [Zone.DISCARD_PILE]: EntityId[];\r\n    [Zone.RECHARGE_PILE]: EntityId[];\r\n    [Zone.IN_PLAY]: EntityId[];\r\n    [Zone.REMOVED]: EntityId[];\r\n  };\r\n  /** Original deck configuration */\r\n  originalDeck: Deck;\r\n  /** Summon slots as configured in deck */\r\n  summonSlots: SummonSlot[];\r\n  /** Which summon slots have been played this game */\r\n  playedSummonSlots: boolean[];\r\n  /** Has used turn summon this turn */\r\n  hasUsedTurnSummon: boolean;\r\n  /** Face-down cards in play (counters, reactions, etc.) */\r\n  faceDownCards: Map<EntityId, Coordinate>;\r\n}\r\n\r\n// ============================================================================\r\n// STACK SYSTEM\r\n// ============================================================================\r\n\r\n/** An action waiting to resolve on the stack */\r\nexport interface StackEntry {\r\n  id: string;\r\n  /** Player who initiated this action */\r\n  playerId: EntityId;\r\n  /** Type of action */\r\n  actionType: 'PLAY_CARD' | 'ACTIVATE_ABILITY' | 'ATTACK' | 'MOVE' | 'TRIGGER_EFFECT';\r\n  /** Source card or ability */\r\n  sourceId: EntityId;\r\n  /** Target(s) of this action */\r\n  targets: ActionTarget[];\r\n  /** Speed level of this action */\r\n  speed: import('./core').Speed;\r\n  /** Additional parameters */\r\n  parameters: Record<string, any>;\r\n  /** When this was added to the stack */\r\n  timestamp: number;\r\n}\r\n\r\n/** Target for an action */\r\nexport interface ActionTarget {\r\n  type: 'SUMMON_UNIT' | 'CARD' | 'PLAYER' | 'COORDINATE' | 'BUILDING';\r\n  id?: EntityId;\r\n  coordinate?: Coordinate;\r\n  parameters?: Record<string, any>;\r\n}\r\n\r\n/** The game's action stack */\r\nexport interface ActionStack {\r\n  entries: StackEntry[];\r\n  /** Is the stack currently resolving */\r\n  isResolving: boolean;\r\n  /** Current priority holder */\r\n  priorityPlayerId: EntityId;\r\n}\r\n\r\n// ============================================================================\r\n// TURN MANAGEMENT\r\n// ============================================================================\r\n\r\n/** Turn state management */\r\nexport interface TurnState {\r\n  /** Current turn number */\r\n  turnNumber: number;\r\n  /** Active player */\r\n  activePlayerId: EntityId;\r\n  /** Current phase */\r\n  currentPhase: TurnPhase;\r\n  /** Phase-specific data */\r\n  phaseData?: Record<string, any>;\r\n  /** Actions taken this turn */\r\n  actionsTaken: StackEntry[];\r\n}\r\n\r\n// ============================================================================\r\n// COMPLETE GAME STATE\r\n// ============================================================================\r\n\r\n/** The complete state of an active game */\r\nexport interface GameState {\r\n  /** Unique game identifier */\r\n  gameId: EntityId;\r\n  /** Players in this game */\r\n  players: Map<EntityId, PlayerGameState>;\r\n  /** The game board */\r\n  board: GameBoard;\r\n  /** Action stack */\r\n  stack: ActionStack;\r\n  /** Turn management */\r\n  turn: TurnState;\r\n  /** All cards used in this game */\r\n  gameCards: Map<EntityId, Card>;\r\n  /** Game configuration */\r\n  config: GameConfig;\r\n  /** Game status */\r\n  status: GameStatus;\r\n  /** When the game started */\r\n  startedAt: Date;\r\n  /** Game history for replay */\r\n  history: GameEvent[];\r\n}\r\n\r\n/** Game configuration settings */\r\nexport interface GameConfig {\r\n  /** Game format (currently only 3v3 supported) */\r\n  format: '3v3';\r\n  /** Time limits */\r\n  timeLimits?: {\r\n    turnTimeLimit: number; // seconds\r\n    gameTimeLimit: number; // seconds\r\n  };\r\n  /** Rule variations */\r\n  rules: {\r\n    allowSpectators: boolean;\r\n    allowUndo: boolean;\r\n    allowPause: boolean;\r\n  };\r\n}\r\n\r\n/** Overall game status */\r\nexport interface GameStatus {\r\n  state: 'WAITING' | 'IN_PROGRESS' | 'COMPLETED' | 'PAUSED' | 'ABANDONED';\r\n  /** Winner if game is completed */\r\n  winnerId?: EntityId;\r\n  /** Reason for game end */\r\n  endReason?: 'VICTORY_POINTS' | 'TIMEOUT' | 'FORFEIT' | 'DRAW';\r\n  /** Current scores */\r\n  scores: Map<EntityId, number>;\r\n}\r\n\r\n/** Events that occur during the game for history/replay */\r\nexport interface GameEvent {\r\n  id: string;\r\n  timestamp: Date;\r\n  playerId: EntityId;\r\n  eventType: 'CARD_PLAYED' | 'ATTACK' | 'MOVE' | 'ABILITY_ACTIVATED' | \r\n             'PHASE_CHANGE' | 'TURN_CHANGE' | 'GAME_END';\r\n  details: Record<string, any>;\r\n  /** Stack state when this event occurred */\r\n  stackSnapshot?: StackEntry[];\r\n}\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/types/game-state.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%225b4a5bb3-2cfa-4da5-8283-770f623e6461%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/calculations.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/types/calculations.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%225b4a5bb3-2cfa-4da5-8283-770f623e6461%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/index.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/types/index.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%225b4a5bb3-2cfa-4da5-8283-770f623e6461%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}}]},{"stopId":"0edcc426-ef7b-4343-a069-3a7e11b64690","entries":[{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/index.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"9a07152","originalToCurrentEdit":[{"txt":"/**\r\n * Central export point for all game types\r\n * Import from here to get access to all type definitions\r\n */\r\n\r\n// Core types and enums\r\nexport * from './core';\r\n\r\n// Card-related types\r\nexport * from './cards';\r\n\r\n// Game state management\r\nexport * from './game-state';\r\n\r\n// Calculations and formulas\r\nexport * from './calculations';\r\n\r\n// Re-export commonly used type unions for convenience\r\nexport type {\r\n  Card,\r\n  Effect,\r\n  Trigger,\r\n  SummonUnit,\r\n  GameState,\r\n  DamageCalculationResult,\r\n  HealingCalculationResult\r\n} from './cards';\r\n\r\nexport type {\r\n  ActionStack,\r\n  PlayerGameState,\r\n  GameBoard\r\n} from './game-state';\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/types/index.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%220edcc426-ef7b-4343-a069-3a7e11b64690%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/data/core-cards.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/data/core-cards.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%220edcc426-ef7b-4343-a069-3a7e11b64690%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}}]},{"stopId":"f541012b-36c6-4ae5-aff4-b97d141f772d","entries":[{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/data/core-cards.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"4c46191","originalToCurrentEdit":[{"txt":"/**\r\n * Core game data including species, roles, and equipment definitions\r\n * This represents the foundational cards that don't change between games\r\n */\r\n\r\nimport {\r\n  SummonSpecies,\r\n  RoleCard,\r\n  EquipmentCard,\r\n  ActionCard,\r\n  BuildingCard,\r\n  QuestCard,\r\n  CounterCard,\r\n  ReactionCard,\r\n  AdvanceCard\r\n} from '../types';\r\nimport {\r\n  StatType,\r\n  CardType,\r\n  EquipmentSlot,\r\n  Speed,\r\n  Rarity\r\n} from '../types/core';\r\n\r\n// ============================================================================\r\n// SUMMON SPECIES DEFINITIONS\r\n// ============================================================================\r\n\r\nexport const SUMMON_SPECIES: Record<string, SummonSpecies> = {\r\n  'gignen': {\r\n    id: 'species-gignen',\r\n    name: 'Gignen',\r\n    description: 'A balanced humanoid species known for their adaptability and determination.',\r\n    baseStats: {\r\n      [StatType.STR]: 12,\r\n      [StatType.END]: 10,\r\n      [StatType.DEF]: 11,\r\n      [StatType.INT]: 11,\r\n      [StatType.SPI]: 10,\r\n      [StatType.MDF]: 8,\r\n      [StatType.SPD]: 10,\r\n      [StatType.ACC]: 9,\r\n      [StatType.LCK]: 12\r\n    },\r\n    artwork: 'gignen-default',\r\n    speciesAbilities: [] // No inherent species abilities for now\r\n  },\r\n\r\n  'fae': {\r\n    id: 'species-fae',\r\n    name: 'Fae',\r\n    description: 'Mystical beings with strong magical affinity and graceful movements.',\r\n    baseStats: {\r\n      [StatType.STR]: 8,\r\n      [StatType.END]: 10,\r\n      [StatType.DEF]: 9,\r\n      [StatType.INT]: 15,\r\n      [StatType.SPI]: 16,\r\n      [StatType.MDF]: 12,\r\n      [StatType.SPD]: 13,\r\n      [StatType.ACC]: 11,\r\n      [StatType.LCK]: 10\r\n    },\r\n    artwork: 'fae-default',\r\n    speciesAbilities: []\r\n  },\r\n\r\n  'wilderling': {\r\n    id: 'species-wilderling',\r\n    name: 'Wilderling',\r\n    description: 'Swift forest dwellers with exceptional speed and accuracy.',\r\n    baseStats: {\r\n      [StatType.STR]: 11,\r\n      [StatType.END]: 12,\r\n      [StatType.DEF]: 8,\r\n      [StatType.INT]: 9,\r\n      [StatType.SPI]: 8,\r\n      [StatType.MDF]: 7,\r\n      [StatType.SPD]: 18,\r\n      [StatType.ACC]: 16,\r\n      [StatType.LCK]: 12\r\n    },\r\n    artwork: 'wilderling-default',\r\n    speciesAbilities: []\r\n  },\r\n\r\n  'stoneheart': {\r\n    id: 'species-stoneheart',\r\n    name: 'Stoneheart',\r\n    description: 'Rock-skinned beings with incredible durability and strength.',\r\n    baseStats: {\r\n      [StatType.STR]: 14,\r\n      [StatType.END]: 16,\r\n      [StatType.DEF]: 15,\r\n      [StatType.INT]: 6,\r\n      [StatType.SPI]: 8,\r\n      [StatType.MDF]: 10,\r\n      [StatType.SPD]: 7,\r\n      [StatType.ACC]: 8,\r\n      [StatType.LCK]: 9\r\n    },\r\n    artwork: 'stoneheart-default',\r\n    speciesAbilities: []\r\n  }\r\n};\r\n\r\n// ============================================================================\r\n// ROLE CARD DEFINITIONS\r\n// ============================================================================\r\n\r\nexport const ROLE_CARDS: Record<string, RoleCard> = {\r\n  // Tier 1 Roles\r\n  'warrior': {\r\n    id: 'role-warrior',\r\n    name: 'Warrior',\r\n    description: 'A frontline fighter specializing in physical combat and defense.',\r\n    cardType: CardType.ROLE,\r\n    rarity: Rarity.COMMON,\r\n    tier: 1,\r\n    statModifiers: {\r\n      [StatType.STR]: 2,\r\n      [StatType.DEF]: 2,\r\n      [StatType.END]: 1\r\n    },\r\n    roleAbilities: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['melee', 'physical', 'tank']\r\n  },\r\n\r\n  'scout': {\r\n    id: 'role-scout',\r\n    name: 'Scout',\r\n    description: 'A swift reconnaissance specialist with high mobility and accuracy.',\r\n    cardType: CardType.ROLE,\r\n    rarity: Rarity.COMMON,\r\n    tier: 1,\r\n    statModifiers: {\r\n      [StatType.SPD]: 3,\r\n      [StatType.ACC]: 2,\r\n      [StatType.LCK]: 1\r\n    },\r\n    roleAbilities: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['ranged', 'mobility', 'accuracy']\r\n  },\r\n\r\n  'magician': {\r\n    id: 'role-magician',\r\n    name: 'Magician',\r\n    description: 'A spellcaster who harnesses magical energies for offense and support.',\r\n    cardType: CardType.ROLE,\r\n    rarity: Rarity.COMMON,\r\n    tier: 1,\r\n    statModifiers: {\r\n      [StatType.INT]: 3,\r\n      [StatType.SPI]: 2,\r\n      [StatType.MDF]: 1\r\n    },\r\n    roleAbilities: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['magical', 'ranged', 'support']\r\n  },\r\n\r\n  // Tier 2 Roles (Advanced)\r\n  'berserker': {\r\n    id: 'role-berserker',\r\n    name: 'Berserker',\r\n    description: 'A fierce warrior who trades defense for overwhelming offensive power.',\r\n    cardType: CardType.ROLE,\r\n    rarity: Rarity.UNCOMMON,\r\n    tier: 2,\r\n    statModifiers: {\r\n      [StatType.STR]: 5,\r\n      [StatType.SPD]: 2,\r\n      [StatType.END]: 1,\r\n      [StatType.DEF]: -1 // Trade-off\r\n    },\r\n    roleAbilities: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['melee', 'physical', 'berserker']\r\n  },\r\n\r\n  'rogue': {\r\n    id: 'role-rogue',\r\n    name: 'Rogue',\r\n    description: 'A stealthy operative with enhanced critical hit capabilities.',\r\n    cardType: CardType.ROLE,\r\n    rarity: Rarity.UNCOMMON,\r\n    tier: 2,\r\n    statModifiers: {\r\n      [StatType.SPD]: 3,\r\n      [StatType.LCK]: 4,\r\n      [StatType.ACC]: 3,\r\n      [StatType.STR]: -1\r\n    },\r\n    roleAbilities: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['stealth', 'critical', 'mobility']\r\n  },\r\n\r\n  'warlock': {\r\n    id: 'role-warlock',\r\n    name: 'Warlock',\r\n    description: 'A dark magic user with immense power and unique abilities.',\r\n    cardType: CardType.ROLE,\r\n    rarity: Rarity.RARE,\r\n    tier: 2,\r\n    statModifiers: {\r\n      [StatType.INT]: 6,\r\n      [StatType.SPI]: 2,\r\n      [StatType.MDF]: 2,\r\n      [StatType.STR]: -2,\r\n      [StatType.DEF]: -1\r\n    },\r\n    roleAbilities: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['dark-magic', 'powerful', 'risky']\r\n  }\r\n};\r\n\r\n// ============================================================================\r\n// EQUIPMENT CARD DEFINITIONS\r\n// ============================================================================\r\n\r\nexport const EQUIPMENT_CARDS: Record<string, EquipmentCard> = {\r\n  // Weapons\r\n  'heirloom_sword': {\r\n    id: 'equip-heirloom-sword',\r\n    name: 'Heirloom Sword',\r\n    description: 'A well-crafted blade passed down through generations.',\r\n    cardType: CardType.EQUIPMENT,\r\n    rarity: Rarity.COMMON,\r\n    slot: EquipmentSlot.WEAPON,\r\n    basePower: 30,\r\n    attackRange: 1,\r\n    statBonuses: {\r\n      [StatType.STR]: 1\r\n    },\r\n    equipmentAbilities: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['sword', 'melee', 'physical']\r\n  },\r\n\r\n  'apprentice_wand': {\r\n    id: 'equip-apprentice-wand',\r\n    name: \"Apprentice's Wand\",\r\n    description: 'A basic magical focus for channeling spells.',\r\n    cardType: CardType.EQUIPMENT,\r\n    rarity: Rarity.COMMON,\r\n    slot: EquipmentSlot.WEAPON,\r\n    basePower: 30,\r\n    attackRange: 3,\r\n    statBonuses: {\r\n      [StatType.INT]: 1\r\n    },\r\n    equipmentAbilities: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['wand', 'magical', 'ranged']\r\n  },\r\n\r\n  'hunting_bow': {\r\n    id: 'equip-hunting-bow',\r\n    name: 'Hunting Bow',\r\n    description: 'A precise ranged weapon favored by scouts and hunters.',\r\n    cardType: CardType.EQUIPMENT,\r\n    rarity: Rarity.COMMON,\r\n    slot: EquipmentSlot.WEAPON,\r\n    basePower: 30,\r\n    attackRange: 5,\r\n    statBonuses: {\r\n      [StatType.ACC]: 2\r\n    },\r\n    equipmentAbilities: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['bow', 'ranged', 'physical']\r\n  }\r\n};\r\n\r\n// Export organized collections\r\nexport const CORE_DATA = {\r\n  species: SUMMON_SPECIES,\r\n  roles: ROLE_CARDS,\r\n  equipment: EQUIPMENT_CARDS\r\n} as const;\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/data/core-cards.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%22f541012b-36c6-4ae5-aff4-b97d141f772d%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/data/tactical-cards.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/data/tactical-cards.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%22f541012b-36c6-4ae5-aff4-b97d141f772d%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}}]},{"stopId":"afbc3cbd-bb35-4b9b-8d45-9c3b2394230b","entries":[{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/data/tactical-cards.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"e2a7306","originalToCurrentEdit":[{"txt":"/**\r\n * Action, Building, Quest, Counter, Reaction, and Advance card definitions\r\n * These are the tactical cards used during gameplay\r\n */\r\n\r\nimport {\r\n  ActionCard,\r\n  BuildingCard,\r\n  QuestCard,\r\n  CounterCard,\r\n  ReactionCard,\r\n  AdvanceCard,\r\n  Effect,\r\n  EffectRequirement,\r\n  EffectResolution\r\n} from '../types';\r\nimport {\r\n  CardType,\r\n  Speed,\r\n  Rarity\r\n} from '../types/core';\r\n\r\n// ============================================================================\r\n// ACTION CARDS\r\n// ============================================================================\r\n\r\nexport const ACTION_CARDS: Record<string, ActionCard> = {\r\n  'sharpened_blade': {\r\n    id: 'action-sharpened-blade',\r\n    name: 'Sharpened Blade',\r\n    description: 'Enhance a weapon\\'s cutting edge, increasing its power.',\r\n    cardType: CardType.ACTION,\r\n    rarity: Rarity.COMMON,\r\n    destinationAfterUse: 'RECHARGE',\r\n    actionEffect: {\r\n      id: 'effect-sharpen-weapon',\r\n      name: 'Sharpen Weapon',\r\n      description: 'Target Weapon equipped to a Warrior based Summon gains +10 Base Power.',\r\n      speed: Speed.ACTION,\r\n      requirements: [\r\n        {\r\n          type: 'SUMMON_ROLE',\r\n          parameters: { role: 'warrior' },\r\n          description: 'Must control a Warrior summon'\r\n        }\r\n      ],\r\n      resolution: {\r\n        type: 'STAT_MODIFIER',\r\n        parameters: { \r\n          target: 'equipped_weapon',\r\n          modifier: 'base_power',\r\n          value: 10,\r\n          duration: 'permanent'\r\n        },\r\n        targetType: 'SINGLE'\r\n      }\r\n    },\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['weapon', 'enhancement', 'warrior']\r\n  },\r\n\r\n  'healing_hands': {\r\n    id: 'action-healing-hands',\r\n    name: 'Healing Hands',\r\n    description: 'Channel restorative magic to heal an ally.',\r\n    cardType: CardType.ACTION,\r\n    rarity: Rarity.COMMON,\r\n    destinationAfterUse: 'DISCARD',\r\n    actionEffect: {\r\n      id: 'effect-magical-healing',\r\n      name: 'Magical Healing',\r\n      description: 'Restore HP to target summon. Can critical heal.',\r\n      speed: Speed.ACTION,\r\n      requirements: [\r\n        {\r\n          type: 'SUMMON_ROLE',\r\n          parameters: { role: 'magician' },\r\n          description: 'Must control a Magician summon'\r\n        }\r\n      ],\r\n      resolution: {\r\n        type: 'HEAL',\r\n        parameters: {\r\n          formula: 'caster.SPI * (1 + base_power / 100)',\r\n          base_power: 40,\r\n          can_crit: true,\r\n          crit_multiplier: 1.5,\r\n          damage_type: 'magical',\r\n          attribute: 'light'\r\n        },\r\n        targetType: 'SINGLE'\r\n      }\r\n    },\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['healing', 'magical', 'support']\r\n  },\r\n\r\n  'rush': {\r\n    id: 'action-rush',\r\n    name: 'Rush',\r\n    description: 'Grant a summon explosive speed at the cost of defense.',\r\n    cardType: CardType.ACTION,\r\n    rarity: Rarity.COMMON,\r\n    destinationAfterUse: 'RECHARGE',\r\n    actionEffect: {\r\n      id: 'effect-rush',\r\n      name: 'Rush',\r\n      description: 'Double movement speed until end of turn, halve DEF until end of opponent\\'s next turn.',\r\n      speed: Speed.ACTION,\r\n      requirements: [],\r\n      resolution: {\r\n        type: 'STAT_MODIFIER',\r\n        parameters: {\r\n          movement_multiplier: 2,\r\n          movement_duration: 'end_of_turn',\r\n          def_multiplier: 0.5,\r\n          def_duration: 'end_of_opponent_next_turn'\r\n        },\r\n        targetType: 'SINGLE'\r\n      }\r\n    },\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['movement', 'speed', 'temporary']\r\n  },\r\n\r\n  'tempest_slash': {\r\n    id: 'action-tempest-slash',\r\n    name: 'Tempest Slash',\r\n    description: 'Empower the next attack with wind magic for additional damage.',\r\n    cardType: CardType.ACTION,\r\n    rarity: Rarity.UNCOMMON,\r\n    destinationAfterUse: 'DISCARD',\r\n    actionEffect: {\r\n      id: 'effect-tempest-slash',\r\n      name: 'Tempest Slash',\r\n      description: 'Add movement and empower next basic attack with wind damage.',\r\n      speed: Speed.ACTION,\r\n      requirements: [],\r\n      resolution: {\r\n        type: 'STAT_MODIFIER',\r\n        parameters: {\r\n          movement_bonus: 1,\r\n          movement_duration: 'end_of_turn',\r\n          next_attack_bonus: {\r\n            formula: 'caster.STR * (1 + base_power / 100) * (caster.STR / target.DEF)',\r\n            base_power: 30,\r\n            damage_type: 'physical',\r\n            attribute: 'air',\r\n            can_crit: true\r\n          }\r\n        },\r\n        targetType: 'SINGLE'\r\n      }\r\n    },\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['enhancement', 'wind', 'attack']\r\n  },\r\n\r\n  'blast_bolt': {\r\n    id: 'action-blast-bolt',\r\n    name: 'Blast Bolt',\r\n    description: 'Fire a powerful magical projectile at an enemy.',\r\n    cardType: CardType.ACTION,\r\n    rarity: Rarity.COMMON,\r\n    destinationAfterUse: 'DISCARD',\r\n    actionEffect: {\r\n      id: 'effect-blast-bolt',\r\n      name: 'Blast Bolt',\r\n      description: 'Deal magical fire damage to target enemy.',\r\n      speed: Speed.ACTION,\r\n      requirements: [\r\n        {\r\n          type: 'SUMMON_ROLE',\r\n          parameters: { role: 'magician' },\r\n          description: 'Must control a Magician summon'\r\n        }\r\n      ],\r\n      resolution: {\r\n        type: 'DAMAGE',\r\n        parameters: {\r\n          formula: 'caster.INT * (1 + base_power / 100) * (caster.INT / target.MDF)',\r\n          base_power: 60,\r\n          base_accuracy: 85,\r\n          can_crit: true,\r\n          crit_multiplier: 1.5,\r\n          damage_type: 'magical',\r\n          attribute: 'fire'\r\n        },\r\n        targetType: 'SINGLE'\r\n      }\r\n    },\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['damage', 'magical', 'fire', 'ranged']\r\n  }\r\n};\r\n\r\n// ============================================================================\r\n// BUILDING CARDS\r\n// ============================================================================\r\n\r\nexport const BUILDING_CARDS: Record<string, BuildingCard> = {\r\n  'gignen_country': {\r\n    id: 'building-gignen-country',\r\n    name: 'Gignen Country',\r\n    description: 'A settlement that accelerates the growth of Gignen summons.',\r\n    cardType: CardType.BUILDING,\r\n    rarity: Rarity.UNCOMMON,\r\n    dimensions: {\r\n      width: 3,\r\n      height: 2\r\n    },\r\n    isHidden: false,\r\n    ongoingEffects: [\r\n      {\r\n        id: 'effect-gignen-growth',\r\n        name: 'Gignen Growth Acceleration',\r\n        description: 'All Gignen based Summons you control receive an additional level whenever they level up.',\r\n        speed: Speed.ACTION,\r\n        requirements: [\r\n          {\r\n            type: 'SUMMON_SPECIES',\r\n            parameters: { species: 'gignen' },\r\n            description: 'Affects Gignen summons only'\r\n          }\r\n        ],\r\n        resolution: {\r\n          type: 'LEVEL_UP',\r\n          parameters: { bonus_levels: 1 },\r\n          targetType: 'MULTIPLE'\r\n        }\r\n      }\r\n    ],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['gignen', 'leveling', 'territory']\r\n  },\r\n\r\n  'dark_altar': {\r\n    id: 'building-dark-altar',\r\n    name: 'Dark Altar',\r\n    description: 'A sinister structure that sacrifices summons for dark power.',\r\n    cardType: CardType.BUILDING,\r\n    rarity: Rarity.RARE,\r\n    dimensions: {\r\n      width: 2,\r\n      height: 2\r\n    },\r\n    isHidden: false,\r\n    ongoingEffects: [],\r\n    destructionConditions: [\r\n      {\r\n        type: 'CUSTOM',\r\n        parameters: { \r\n          trigger: 'end_of_next_turn',\r\n          effect: 'destroy_with_occupants',\r\n          reward: 'advance_magician_to_20'\r\n        },\r\n        description: 'Destroys at end of next turn along with occupying summons'\r\n      }\r\n    ],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['dark', 'sacrifice', 'powerful']\r\n  }\r\n};\r\n\r\n// ============================================================================\r\n// QUEST CARDS\r\n// ============================================================================\r\n\r\nexport const QUEST_CARDS: Record<string, QuestCard> = {\r\n  'nearwood_forest_expedition': {\r\n    id: 'quest-nearwood-expedition',\r\n    name: 'Nearwood Forest Expedition',\r\n    description: 'Lead an expedition to gain valuable experience.',\r\n    cardType: CardType.QUEST,\r\n    rarity: Rarity.COMMON,\r\n    objective: {\r\n      type: 'SUMMON_LEVEL',\r\n      parameters: { \r\n        roles: ['warrior', 'scout', 'magician'],\r\n        max_level: 9\r\n      },\r\n      description: 'Control target Warrior, Scout, or Magician based Summon whose current level is under 10'\r\n    },\r\n    reward: {\r\n      id: 'effect-expedition-experience',\r\n      name: 'Expedition Experience',\r\n      description: 'Target Summon gains 2 levels.',\r\n      speed: Speed.ACTION,\r\n      requirements: [],\r\n      resolution: {\r\n        type: 'LEVEL_UP',\r\n        parameters: { levels: 2 },\r\n        targetType: 'SINGLE'\r\n      }\r\n    },\r\n    repeatable: false,\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['experience', 'leveling', 'exploration']\r\n  }\r\n};\r\n\r\n// ============================================================================\r\n// COUNTER CARDS\r\n// ============================================================================\r\n\r\nexport const COUNTER_CARDS: Record<string, CounterCard> = {\r\n  'dramatic_return': {\r\n    id: 'counter-dramatic-return',\r\n    name: 'Dramatic Return!',\r\n    description: 'Bring back a fallen ally when all seems lost.',\r\n    cardType: CardType.COUNTER,\r\n    rarity: Rarity.UNCOMMON,\r\n    mustBeSet: true,\r\n    activationTrigger: {\r\n      event: 'ON_DEFEAT',\r\n      conditions: [\r\n        {\r\n          type: 'SUMMON_IN_PLAY',\r\n          parameters: { controller: 'self' },\r\n          description: 'Your summon is defeated'\r\n        }\r\n      ],\r\n      effect: {\r\n        id: 'effect-dramatic-return',\r\n        name: 'Dramatic Return',\r\n        description: 'Return defeated summon to play with 10% HP.',\r\n        speed: Speed.COUNTER,\r\n        requirements: [],\r\n        resolution: {\r\n          type: 'SUMMON',\r\n          parameters: {\r\n            target: 'defeated_summon',\r\n            hp_percentage: 10,\r\n            location: 'your_territory'\r\n          },\r\n          targetType: 'SINGLE'\r\n        }\r\n      }\r\n    },\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['revival', 'defensive', 'dramatic']\r\n  },\r\n\r\n  'graverobbing': {\r\n    id: 'counter-graverobbing',\r\n    name: 'Graverobbing',\r\n    description: 'Deny the enemy their victory through dark magic.',\r\n    cardType: CardType.COUNTER,\r\n    rarity: Rarity.RARE,\r\n    mustBeSet: true,\r\n    activationTrigger: {\r\n      event: 'ON_DEFEAT',\r\n      conditions: [\r\n        {\r\n          type: 'SUMMON_IN_PLAY',\r\n          parameters: { controller: 'self' },\r\n          description: 'Your summon is defeated'\r\n        }\r\n      ],\r\n      effect: {\r\n        id: 'effect-graverobbing',\r\n        name: 'Graverobbing',\r\n        description: 'Nullify Victory Point gain. Cost: Discard a card.',\r\n        speed: Speed.COUNTER,\r\n        requirements: [],\r\n        resolution: {\r\n          type: 'CUSTOM',\r\n          parameters: {\r\n            nullify_vp_gain: true,\r\n            cost: 'discard_card'\r\n          },\r\n          targetType: 'SINGLE'\r\n        }\r\n      }\r\n    },\r\n    activationCost: {\r\n      id: 'cost-discard-card',\r\n      name: 'Discard Cost',\r\n      description: 'Discard a card from your hand.',\r\n      speed: Speed.COUNTER,\r\n      requirements: [],\r\n      resolution: {\r\n        type: 'CUSTOM',\r\n        parameters: { action: 'discard_from_hand' },\r\n        targetType: 'SINGLE'\r\n      }\r\n    },\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['denial', 'dark', 'sacrifice']\r\n  }\r\n};\r\n\r\n// ============================================================================\r\n// ADVANCE CARDS\r\n// ============================================================================\r\n\r\nexport const ADVANCE_CARDS: Record<string, AdvanceCard> = {\r\n  'berserker_rage': {\r\n    id: 'advance-berserker-rage',\r\n    name: 'Berserker Rage',\r\n    description: 'Transform a warrior into a fearsome berserker.',\r\n    cardType: CardType.ADVANCE,\r\n    rarity: Rarity.UNCOMMON,\r\n    summonRequirements: [\r\n      {\r\n        type: 'SUMMON_ROLE',\r\n        parameters: { role: 'warrior' },\r\n        description: 'Target must be a Warrior'\r\n      },\r\n      {\r\n        type: 'SUMMON_LEVEL',\r\n        parameters: { min_level: 10 },\r\n        description: 'Target must be level 10 or higher'\r\n      }\r\n    ],\r\n    newRole: {\r\n      id: 'role-berserker', // Reference to berserker role\r\n      name: 'Berserker',\r\n      description: 'A fierce warrior who trades defense for overwhelming offensive power.',\r\n      cardType: CardType.ROLE,\r\n      rarity: Rarity.UNCOMMON,\r\n      tier: 2,\r\n      statModifiers: {},\r\n      roleAbilities: [],\r\n      effects: [],\r\n      triggers: [],\r\n      tags: []\r\n    },\r\n    advancementEffects: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['advancement', 'warrior', 'berserker']\r\n  },\r\n\r\n  'alrecht_barkstep_scoutmaster': {\r\n    id: 'advance-alrecht-barkstep',\r\n    name: 'Alrecht Barkstep, Scoutmaster',\r\n    description: 'A legendary scout who can rally allies to his position.',\r\n    cardType: CardType.ADVANCE,\r\n    rarity: Rarity.LEGENDARY,\r\n    summonRequirements: [\r\n      {\r\n        type: 'SUMMON_ROLE',\r\n        parameters: { role: 'scout' },\r\n        description: 'Target must be a Scout'\r\n      },\r\n      {\r\n        type: 'CUSTOM',\r\n        parameters: { condition: 'completed_quest' },\r\n        description: 'Target must have completed a Quest'\r\n      }\r\n    ],\r\n    newRole: {\r\n      id: 'role-rogue', // Reference to rogue role\r\n      name: 'Rogue',\r\n      description: 'A stealthy operative with enhanced capabilities.',\r\n      cardType: CardType.ROLE,\r\n      rarity: Rarity.UNCOMMON,\r\n      tier: 2,\r\n      statModifiers: {},\r\n      roleAbilities: [],\r\n      effects: [],\r\n      triggers: [],\r\n      tags: []\r\n    },\r\n    advancementEffects: [\r\n      {\r\n        id: 'effect-follow-me',\r\n        name: 'Follow Me!',\r\n        description: 'Adds \"Follow Me!\" to hand when entering play and at start of turn.',\r\n        speed: Speed.ACTION,\r\n        requirements: [],\r\n        resolution: {\r\n          type: 'CUSTOM',\r\n          parameters: { action: 'add_follow_me_to_hand' },\r\n          targetType: 'SINGLE'\r\n        }\r\n      }\r\n    ],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['named', 'legendary', 'scout', 'support']\r\n  },\r\n\r\n  'shadow_pact': {\r\n    id: 'advance-shadow-pact',\r\n    name: 'Shadow Pact',\r\n    description: 'Forge a dark contract to gain immense magical power.',\r\n    cardType: CardType.ADVANCE,\r\n    rarity: Rarity.EPIC,\r\n    summonRequirements: [\r\n      {\r\n        type: 'SUMMON_ROLE',\r\n        parameters: { role: 'magician' },\r\n        description: 'Target must be a Magician'\r\n      },\r\n      {\r\n        type: 'SUMMON_LEVEL',\r\n        parameters: { exact_level: 20 },\r\n        description: 'Target must be exactly level 20'\r\n      }\r\n    ],\r\n    newRole: {\r\n      id: 'role-warlock', // Reference to warlock role\r\n      name: 'Warlock',\r\n      description: 'A master of dark magic with immense power.',\r\n      cardType: CardType.ROLE,\r\n      rarity: Rarity.RARE,\r\n      tier: 2,\r\n      statModifiers: {},\r\n      roleAbilities: [],\r\n      effects: [],\r\n      triggers: [],\r\n      tags: []\r\n    },\r\n    advancementEffects: [\r\n      {\r\n        id: 'effect-nightmare-pain',\r\n        name: 'Nightmare Pain',\r\n        description: 'Adds \"Nightmare Pain\" counter to hand each draw phase.',\r\n        speed: Speed.ACTION,\r\n        requirements: [],\r\n        resolution: {\r\n          type: 'CUSTOM',\r\n          parameters: { action: 'add_nightmare_pain_to_hand' },\r\n          targetType: 'SINGLE'\r\n        }\r\n      }\r\n    ],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['dark', 'powerful', 'warlock', 'pact']\r\n  }\r\n};\r\n\r\n// Export organized collections\r\nexport const TACTICAL_CARDS = {\r\n  actions: ACTION_CARDS,\r\n  buildings: BUILDING_CARDS,\r\n  quests: QUEST_CARDS,\r\n  counters: COUNTER_CARDS,\r\n  advances: ADVANCE_CARDS\r\n} as const;\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/data/tactical-cards.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%22afbc3cbd-bb35-4b9b-8d45-9c3b2394230b%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/data/index.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/data/index.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%22afbc3cbd-bb35-4b9b-8d45-9c3b2394230b%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/engine/calculations.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/engine/calculations.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%22afbc3cbd-bb35-4b9b-8d45-9c3b2394230b%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}}]},{"stopId":"bd9d9bbb-893a-4138-8475-fc7274187c7b","entries":[{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/engine/calculations.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"0775244","originalToCurrentEdit":[{"txt":"/**\r\n * Core calculation utilities for game mechanics\r\n * Implements the formulas described in the game design document\r\n */\r\n\r\nimport {\r\n  Stats,\r\n  StatType,\r\n  GrowthRate,\r\n  GROWTH_RATE_VALUES,\r\n  StatCalculationConfig,\r\n  StatCalculationResult,\r\n  DerivedStatFormulas\r\n} from '../types';\r\n\r\n// ============================================================================\r\n// STAT CALCULATION UTILITIES\r\n// ============================================================================\r\n\r\n/**\r\n * Calculate a single stat's value at a given level\r\n * Formula: FinalStat = (BaseStat + Floor(Level × GrowthRate) × Role Modifier) + Equipment Bonus + Other Bonuses\r\n */\r\nexport function calculateStat(config: StatCalculationConfig): StatCalculationResult {\r\n  const { baseStat, growthRate, level, roleModifier, equipmentBonus, temporaryModifiers } = config;\r\n  \r\n  // Get numeric growth rate value\r\n  const growthValue = GROWTH_RATE_VALUES[growthRate];\r\n  \r\n  // Calculate growth contribution\r\n  const growthContribution = Math.floor(level * growthValue);\r\n  \r\n  // Apply role modifier to the base + growth\r\n  const roleAdjusted = (baseStat + growthContribution) * roleModifier;\r\n  \r\n  // Add equipment and temporary bonuses\r\n  const finalValue = roleAdjusted + equipmentBonus + temporaryModifiers;\r\n  \r\n  return {\r\n    finalValue: Math.floor(finalValue), // Always round down\r\n    breakdown: {\r\n      base: baseStat,\r\n      growth: growthContribution,\r\n      role: roleAdjusted - (baseStat + growthContribution),\r\n      equipment: equipmentBonus,\r\n      temporary: temporaryModifiers\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Calculate all stats for a summon at a given level\r\n */\r\nexport function calculateAllStats(\r\n  baseStats: Stats,\r\n  growthRates: Record<StatType, GrowthRate>,\r\n  level: number,\r\n  roleModifiers: Partial<Stats> = {},\r\n  equipmentBonuses: Partial<Stats> = {},\r\n  temporaryModifiers: Partial<Stats> = {}\r\n): Stats {\r\n  const result: Partial<Stats> = {};\r\n  \r\n  for (const statType of Object.values(StatType)) {\r\n    const config: StatCalculationConfig = {\r\n      baseStat: baseStats[statType],\r\n      growthRate: growthRates[statType],\r\n      level,\r\n      roleModifier: 1 + (roleModifiers[statType] || 0) / 100, // Convert to multiplier\r\n      equipmentBonus: equipmentBonuses[statType] || 0,\r\n      temporaryModifiers: temporaryModifiers[statType] || 0\r\n    };\r\n    \r\n    result[statType] = calculateStat(config).finalValue;\r\n  }\r\n  \r\n  return result as Stats;\r\n}\r\n\r\n// ============================================================================\r\n// DERIVED STAT FORMULAS\r\n// ============================================================================\r\n\r\n/**\r\n * Implemented derived stat formulas from the game design\r\n */\r\nexport const DERIVED_STATS: DerivedStatFormulas = {\r\n  /**\r\n   * Max HP = 50 + Floor(END ^ 1.5)\r\n   */\r\n  maxHp: (endurance: number): number => {\r\n    return 50 + Math.floor(Math.pow(endurance, 1.5));\r\n  },\r\n\r\n  /**\r\n   * Movement Speed = 2 + Floor((SPD - 10) / 5)\r\n   */\r\n  movementSpeed: (speed: number): number => {\r\n    return 2 + Math.floor((speed - 10) / 5);\r\n  },\r\n\r\n  /**\r\n   * Basic Attack To Hit = 90 + (ACC / 10)\r\n   */\r\n  basicAttackToHit: (accuracy: number): number => {\r\n    return 90 + (accuracy / 10);\r\n  },\r\n\r\n  /**\r\n   * Critical Hit Chance = Floor((LCK × 0.3375) + 1.65)\r\n   */\r\n  criticalHitChance: (luck: number): number => {\r\n    return Math.floor((luck * 0.3375) + 1.65);\r\n  }\r\n};\r\n\r\n// ============================================================================\r\n// DAMAGE CALCULATION UTILITIES\r\n// ============================================================================\r\n\r\n/**\r\n * Standard basic attack damage formula\r\n * STR × (1 + Weapon Power / 100) × (STR / Target DEF) × IF_CRIT\r\n */\r\nexport function calculateBasicAttackDamage(\r\n  attackerStrength: number,\r\n  weaponPower: number,\r\n  targetDefense: number,\r\n  isCritical: boolean = false,\r\n  critMultiplier: number = 1.5\r\n): number {\r\n  const baseDamage = attackerStrength * (1 + weaponPower / 100) * (attackerStrength / targetDefense);\r\n  const critAdjusted = isCritical ? baseDamage * critMultiplier : baseDamage;\r\n  return Math.floor(critAdjusted);\r\n}\r\n\r\n/**\r\n * Enhanced basic attack damage for ranged weapons (bow formula)\r\n * ((STR + ACC) / 2) × (1 + Weapon Power / 100) × (STR / Target DEF) × IF_CRIT\r\n */\r\nexport function calculateRangedAttackDamage(\r\n  attackerStrength: number,\r\n  attackerAccuracy: number,\r\n  weaponPower: number,\r\n  targetDefense: number,\r\n  isCritical: boolean = false,\r\n  critMultiplier: number = 1.5\r\n): number {\r\n  const baseDamage = ((attackerStrength + attackerAccuracy) / 2) * \r\n                     (1 + weaponPower / 100) * \r\n                     (attackerStrength / targetDefense);\r\n  const critAdjusted = isCritical ? baseDamage * critMultiplier : baseDamage;\r\n  return Math.floor(critAdjusted);\r\n}\r\n\r\n/**\r\n * Magical attack damage formula\r\n * INT × (1 + Weapon Power / 100) × (INT / Target MDF) × IF_CRIT\r\n */\r\nexport function calculateMagicalAttackDamage(\r\n  attackerIntelligence: number,\r\n  weaponPower: number,\r\n  targetMagicDefense: number,\r\n  isCritical: boolean = false,\r\n  critMultiplier: number = 1.5\r\n): number {\r\n  const baseDamage = attackerIntelligence * \r\n                     (1 + weaponPower / 100) * \r\n                     (attackerIntelligence / targetMagicDefense);\r\n  const critAdjusted = isCritical ? baseDamage * critMultiplier : baseDamage;\r\n  return Math.floor(critAdjusted);\r\n}\r\n\r\n/**\r\n * Standard healing formula\r\n * SPI × (1 + base_power / 100)\r\n */\r\nexport function calculateHealing(\r\n  healerSpirit: number,\r\n  basePower: number,\r\n  isCritical: boolean = false,\r\n  critMultiplier: number = 1.5\r\n): number {\r\n  const baseHealing = healerSpirit * (1 + basePower / 100);\r\n  const critAdjusted = isCritical ? baseHealing * critMultiplier : baseHealing;\r\n  return Math.floor(critAdjusted);\r\n}\r\n\r\n// ============================================================================\r\n// PROBABILITY UTILITIES\r\n// ============================================================================\r\n\r\n/**\r\n * Generate a random number between min and max (inclusive)\r\n */\r\nexport function randomBetween(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * Roll a percentage chance (0-100)\r\n * Returns true if the roll succeeds\r\n */\r\nexport function rollPercentage(chance: number): boolean {\r\n  return Math.random() * 100 <= chance;\r\n}\r\n\r\n/**\r\n * Roll for critical hit\r\n */\r\nexport function rollCritical(luckStat: number): boolean {\r\n  const critChance = DERIVED_STATS.criticalHitChance(luckStat);\r\n  return rollPercentage(critChance);\r\n}\r\n\r\n/**\r\n * Roll for hit chance\r\n */\r\nexport function rollHit(accuracyStat: number, baseAccuracy: number = 90): boolean {\r\n  const hitChance = DERIVED_STATS.basicAttackToHit(accuracyStat);\r\n  const totalChance = Math.min(100, baseAccuracy + (accuracyStat / 10));\r\n  return rollPercentage(totalChance);\r\n}\r\n\r\n// ============================================================================\r\n// VALIDATION UTILITIES\r\n// ============================================================================\r\n\r\n/**\r\n * Validate that a level is within acceptable range (5-20)\r\n */\r\nexport function isValidLevel(level: number): boolean {\r\n  return level >= 5 && level <= 20 && Number.isInteger(level);\r\n}\r\n\r\n/**\r\n * Validate that coordinates are within board bounds (0-11 x, 0-13 y)\r\n */\r\nexport function isValidCoordinate(x: number, y: number): boolean {\r\n  return x >= 0 && x < 12 && y >= 0 && y < 14;\r\n}\r\n\r\n/**\r\n * Calculate distance between two coordinates\r\n */\r\nexport function calculateDistance(x1: number, y1: number, x2: number, y2: number): number {\r\n  return Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1)); // Chess distance\r\n}\r\n\r\n/**\r\n * Check if a coordinate is within range of another\r\n */\r\nexport function isWithinRange(\r\n  sourceX: number, \r\n  sourceY: number, \r\n  targetX: number, \r\n  targetY: number, \r\n  range: number\r\n): boolean {\r\n  return calculateDistance(sourceX, sourceY, targetX, targetY) <= range;\r\n}\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/engine/calculations.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%22bd9d9bbb-893a-4138-8475-fc7274187c7b%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/engine/index.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/engine/index.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%22bd9d9bbb-893a-4138-8475-fc7274187c7b%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/demo.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/demo.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%22bd9d9bbb-893a-4138-8475-fc7274187c7b%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}}]},{"stopId":"aea60b41-1f6b-493a-ac18-7da80c07eb43","entries":[{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/demo.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"3459ab9","originalToCurrentEdit":[{"txt":"/**\r\n * Demo showcasing the type system and calculations\r\n * This recreates parts of the game example from the design document\r\n */\r\n\r\nimport {\r\n  StatType,\r\n  GrowthRate,\r\n  SummonCard,\r\n  SummonUnit,\r\n  CardType,\r\n  Rarity\r\n} from '../types';\r\nimport {\r\n  calculateAllStats,\r\n  DERIVED_STATS,\r\n  calculateBasicAttackDamage,\r\n  rollCritical,\r\n  rollHit\r\n} from '../engine';\r\nimport { GAME_DATA } from '../data';\r\n\r\n// ============================================================================\r\n// DEMO: CREATING SUMMON CARDS\r\n// ============================================================================\r\n\r\n/**\r\n * Create a Gignen Warrior summon card like from the game example\r\n */\r\nexport function createGignenWarriorDemo(): SummonCard {\r\n  const gignenSpecies = GAME_DATA.species.gignen;\r\n  \r\n  return {\r\n    id: 'demo-gignen-warrior-001',\r\n    name: 'Gignen Warrior',\r\n    description: 'A sturdy Gignen fighter with balanced growth potential.',\r\n    cardType: CardType.SUMMON,\r\n    rarity: Rarity.COMMON,\r\n    speciesId: gignenSpecies.id,\r\n    baseStats: gignenSpecies.baseStats,\r\n    // Example growth rates from the game story\r\n    growthRates: {\r\n      [StatType.STR]: GrowthRate.GRADUAL,    // 1.33\r\n      [StatType.END]: GrowthRate.NORMAL,     // 1.0\r\n      [StatType.DEF]: GrowthRate.NORMAL,     // 1.0  \r\n      [StatType.INT]: GrowthRate.STEADY,     // 0.66\r\n      [StatType.SPI]: GrowthRate.NORMAL,     // 1.0\r\n      [StatType.MDF]: GrowthRate.STEADY,     // 0.66\r\n      [StatType.SPD]: GrowthRate.MINIMAL,    // 0.5\r\n      [StatType.ACC]: GrowthRate.STEADY,     // 0.66\r\n      [StatType.LCK]: GrowthRate.EXCEPTIONAL // 2.0\r\n    },\r\n    generatedAt: new Date(),\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['gignen', 'warrior', 'balanced']\r\n  };\r\n}\r\n\r\n/**\r\n * Create a summon unit from a summon card at a specific level\r\n */\r\nexport function createSummonUnit(\r\n  summonCard: SummonCard, \r\n  level: number,\r\n  playerId: string,\r\n  position: { x: number, y: number }\r\n): SummonUnit {\r\n  const warriorRole = GAME_DATA.roles.warrior;\r\n  const heirloomSword = GAME_DATA.equipment.heirloom_sword;\r\n  \r\n  // Calculate current stats at this level\r\n  const currentStats = calculateAllStats(\r\n    summonCard.baseStats,\r\n    summonCard.growthRates,\r\n    level,\r\n    warriorRole.statModifiers,\r\n    heirloomSword.statBonuses\r\n  );\r\n  \r\n  // Calculate derived stats\r\n  const maxHp = DERIVED_STATS.maxHp(currentStats[StatType.END]);\r\n  const movementSpeed = DERIVED_STATS.movementSpeed(currentStats[StatType.SPD]);\r\n  \r\n  return {\r\n    id: `unit-${summonCard.id}-${Date.now()}`,\r\n    name: `${summonCard.name} (Level ${level})`,\r\n    originalCardId: summonCard.id,\r\n    playerId,\r\n    position,\r\n    level,\r\n    currentHp: maxHp, // Start at full HP\r\n    maxHp,\r\n    currentStats,\r\n    baseStats: summonCard.baseStats,\r\n    growthRates: summonCard.growthRates,\r\n    currentRole: warriorRole.id,\r\n    equipment: {\r\n      weapon: heirloomSword.id\r\n    },\r\n    statusEffects: [],\r\n    movementUsed: 0,\r\n    hasAttacked: false,\r\n    temporaryModifiers: []\r\n  };\r\n}\r\n\r\n// ============================================================================\r\n// DEMO: COMBAT CALCULATION\r\n// ============================================================================\r\n\r\n/**\r\n * Simulate the Tempest Slash attack from Turn 5 of the game example\r\n */\r\nexport function simulateTempestSlashAttack(): void {\r\n  console.log('=== Tempest Slash Attack Simulation ===');\r\n  \r\n  // Create the attacking Gignen Berserker (level 12 in the example)\r\n  const gignenCard = createGignenWarriorDemo();\r\n  const berserker = createSummonUnit(gignenCard, 12, 'player-a', { x: 4, y: 11 });\r\n  \r\n  // The berserker role has different stat modifiers\r\n  const berserkerRole = GAME_DATA.roles.berserker;\r\n  berserker.currentStats = calculateAllStats(\r\n    gignenCard.baseStats,\r\n    gignenCard.growthRates,\r\n    12,\r\n    berserkerRole.statModifiers,\r\n    { [StatType.STR]: 1 } // Heirloom sword bonus\r\n  );\r\n  \r\n  console.log('Attacker Stats:', {\r\n    STR: berserker.currentStats[StatType.STR],\r\n    ACC: berserker.currentStats[StatType.ACC],\r\n    LCK: berserker.currentStats[StatType.LCK]\r\n  });\r\n  \r\n  // Create the target Fae Magician (level 6 in the example)\r\n  const faeSpecies = GAME_DATA.species.fae;\r\n  const magicianRole = GAME_DATA.roles.magician;\r\n  \r\n  const targetStats = calculateAllStats(\r\n    faeSpecies.baseStats,\r\n    {\r\n      [StatType.STR]: GrowthRate.NORMAL,\r\n      [StatType.END]: GrowthRate.NORMAL,\r\n      [StatType.DEF]: GrowthRate.NORMAL,\r\n      [StatType.INT]: GrowthRate.GRADUAL,\r\n      [StatType.SPI]: GrowthRate.GRADUAL,\r\n      [StatType.MDF]: GrowthRate.NORMAL,\r\n      [StatType.SPD]: GrowthRate.NORMAL,\r\n      [StatType.ACC]: GrowthRate.GRADUAL,\r\n      [StatType.LCK]: GrowthRate.NORMAL\r\n    },\r\n    6,\r\n    magicianRole.statModifiers\r\n  );\r\n  \r\n  console.log('Target Stats:', {\r\n    DEF: targetStats[StatType.DEF],\r\n    MDF: targetStats[StatType.MDF]\r\n  });\r\n  \r\n  // Simulate the attack sequence from the example\r\n  const attackerSTR = berserker.currentStats[StatType.STR]; // Should be 44\r\n  const attackerACC = berserker.currentStats[StatType.ACC];\r\n  const targetDEF = targetStats[StatType.DEF]; // Should be 16\r\n  const weaponPower = 40; // Enhanced heirloom sword (30 + 10 from Sharpened Blade)\r\n  \r\n  // Check if attack hits\r\n  const hitChance = 90 + (attackerACC / 10);\r\n  console.log(`Hit chance: ${hitChance.toFixed(1)}%`);\r\n  \r\n  // Check for critical\r\n  const critChance = DERIVED_STATS.criticalHitChance(berserker.currentStats[StatType.LCK]);\r\n  console.log(`Crit chance: ${critChance}%`);\r\n  \r\n  // Calculate weapon damage\r\n  const weaponDamage = calculateBasicAttackDamage(\r\n    attackerSTR,\r\n    weaponPower,\r\n    targetDEF,\r\n    false // Not crit in the example\r\n  );\r\n  \r\n  // Calculate Tempest Slash additional damage\r\n  const tempestDamage = Math.floor(\r\n    attackerSTR * (1 + 30 / 100) * (attackerSTR / targetDEF)\r\n  );\r\n  \r\n  const totalDamage = weaponDamage + tempestDamage;\r\n  \r\n  console.log('Damage Breakdown:');\r\n  console.log(`- Weapon damage: ${weaponDamage}`);\r\n  console.log(`- Tempest Slash: ${tempestDamage}`);\r\n  console.log(`- Total damage: ${totalDamage}`);\r\n  console.log('Expected from example: 326 (169 + 157)');\r\n}\r\n\r\n// ============================================================================\r\n// DEMO: STAT PROGRESSION\r\n// ============================================================================\r\n\r\n/**\r\n * Show how a summon's stats progress from level 5 to 20\r\n */\r\nexport function demonstrateStatProgression(): void {\r\n  console.log('\\n=== Stat Progression Demo ===');\r\n  \r\n  const gignenCard = createGignenWarriorDemo();\r\n  const warriorRole = GAME_DATA.roles.warrior;\r\n  \r\n  console.log('Gignen Warrior stat progression (with Warrior role):');\r\n  console.log('Level | STR | END | DEF | HP  | MV');\r\n  console.log('------|-----|-----|-----|-----|---');\r\n  \r\n  for (let level = 5; level <= 20; level += 5) {\r\n    const stats = calculateAllStats(\r\n      gignenCard.baseStats,\r\n      gignenCard.growthRates,\r\n      level,\r\n      warriorRole.statModifiers\r\n    );\r\n    \r\n    const hp = DERIVED_STATS.maxHp(stats[StatType.END]);\r\n    const mv = DERIVED_STATS.movementSpeed(stats[StatType.SPD]);\r\n    \r\n    console.log(\r\n      `${level.toString().padStart(5)} | ` +\r\n      `${stats[StatType.STR].toString().padStart(3)} | ` +\r\n      `${stats[StatType.END].toString().padStart(3)} | ` +\r\n      `${stats[StatType.DEF].toString().padStart(3)} | ` +\r\n      `${hp.toString().padStart(3)} | ` +\r\n      `${mv.toString().padStart(2)}`\r\n    );\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// DEMO RUNNER\r\n// ============================================================================\r\n\r\n/**\r\n * Run all demos\r\n */\r\nexport function runAllDemos(): void {\r\n  console.log('🎮 Card Game Demo System');\r\n  console.log('========================\\n');\r\n  \r\n  demonstrateStatProgression();\r\n  simulateTempestSlashAttack();\r\n  \r\n  console.log('\\n✅ All demos completed!');\r\n}\r\n\r\n// Export for external use\r\nexport { runAllDemos as default };\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/demo.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%22aea60b41-1f6b-493a-ac18-7da80c07eb43%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}}]}],"postEdit":[{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/demo.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"4807deb","originalToCurrentEdit":[{"txt":"/**\r\n * Demo showcasing the type system and calculations\r\n * This recreates parts of the game example from the design document\r\n */\r\n\r\nimport {\r\n  StatType,\r\n  GrowthRate,\r\n  SummonCard,\r\n  SummonUnit,\r\n  CardType,\r\n  Rarity\r\n} from './types';\r\nimport {\r\n  calculateAllStats,\r\n  DERIVED_STATS,\r\n  calculateBasicAttackDamage\r\n} from './engine';\r\nimport { GAME_DATA } from './data';\r\n\r\n// ============================================================================\r\n// DEMO: CREATING SUMMON CARDS\r\n// ============================================================================\r\n\r\n/**\r\n * Create a Gignen Warrior summon card like from the game example\r\n */\r\nexport function createGignenWarriorDemo(): SummonCard {\r\n  const gignenSpecies = GAME_DATA.species.gignen;\r\n  \r\n  return {\r\n    id: 'demo-gignen-warrior-001',\r\n    name: 'Gignen Warrior',\r\n    description: 'A sturdy Gignen fighter with balanced growth potential.',\r\n    cardType: CardType.SUMMON,\r\n    rarity: Rarity.COMMON,\r\n    speciesId: gignenSpecies.id,\r\n    baseStats: gignenSpecies.baseStats,\r\n    // Example growth rates from the game story\r\n    growthRates: {\r\n      [StatType.STR]: GrowthRate.GRADUAL,    // 1.33\r\n      [StatType.END]: GrowthRate.NORMAL,     // 1.0\r\n      [StatType.DEF]: GrowthRate.NORMAL,     // 1.0  \r\n      [StatType.INT]: GrowthRate.STEADY,     // 0.66\r\n      [StatType.SPI]: GrowthRate.NORMAL,     // 1.0\r\n      [StatType.MDF]: GrowthRate.STEADY,     // 0.66\r\n      [StatType.SPD]: GrowthRate.MINIMAL,    // 0.5\r\n      [StatType.ACC]: GrowthRate.STEADY,     // 0.66\r\n      [StatType.LCK]: GrowthRate.EXCEPTIONAL // 2.0\r\n    },\r\n    generatedAt: new Date(),\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['gignen', 'warrior', 'balanced']\r\n  };\r\n}\r\n\r\n/**\r\n * Create a summon unit from a summon card at a specific level\r\n */\r\nexport function createSummonUnit(\r\n  summonCard: SummonCard, \r\n  level: number,\r\n  playerId: string,\r\n  position: { x: number, y: number }\r\n): SummonUnit {\r\n  const warriorRole = GAME_DATA.roles.warrior;\r\n  const heirloomSword = GAME_DATA.equipment.heirloom_sword;\r\n  \r\n  // Calculate current stats at this level\r\n  const currentStats = calculateAllStats(\r\n    summonCard.baseStats,\r\n    summonCard.growthRates,\r\n    level,\r\n    warriorRole.statModifiers,\r\n    heirloomSword.statBonuses\r\n  );\r\n  \r\n  // Calculate derived stats\r\n  const maxHp = DERIVED_STATS.maxHp(currentStats[StatType.END]);\r\n  const movementSpeed = DERIVED_STATS.movementSpeed(currentStats[StatType.SPD]);\r\n  \r\n  return {\r\n    id: `unit-${summonCard.id}-${Date.now()}`,\r\n    name: `${summonCard.name} (Level ${level})`,\r\n    originalCardId: summonCard.id,\r\n    playerId,\r\n    position,\r\n    level,\r\n    currentHp: maxHp, // Start at full HP\r\n    maxHp,\r\n    currentStats,\r\n    baseStats: summonCard.baseStats,\r\n    growthRates: summonCard.growthRates,\r\n    currentRole: warriorRole.id,\r\n    equipment: {\r\n      weapon: heirloomSword.id\r\n    },\r\n    statusEffects: [],\r\n    movementUsed: 0,\r\n    hasAttacked: false,\r\n    temporaryModifiers: []\r\n  };\r\n}\r\n\r\n// ============================================================================\r\n// DEMO: COMBAT CALCULATION\r\n// ============================================================================\r\n\r\n/**\r\n * Simulate the Tempest Slash attack from Turn 5 of the game example\r\n */\r\nexport function simulateTempestSlashAttack(): void {\r\n  console.log('=== Tempest Slash Attack Simulation ===');\r\n  \r\n  // Create the attacking Gignen Berserker (level 12 in the example)\r\n  const gignenCard = createGignenWarriorDemo();\r\n  const berserker = createSummonUnit(gignenCard, 12, 'player-a', { x: 4, y: 11 });\r\n  \r\n  // The berserker role has different stat modifiers\r\n  const berserkerRole = GAME_DATA.roles.berserker;\r\n  berserker.currentStats = calculateAllStats(\r\n    gignenCard.baseStats,\r\n    gignenCard.growthRates,\r\n    12,\r\n    berserkerRole.statModifiers,\r\n    { [StatType.STR]: 1 } // Heirloom sword bonus\r\n  );\r\n  \r\n  console.log('Attacker Stats:', {\r\n    STR: berserker.currentStats[StatType.STR],\r\n    ACC: berserker.currentStats[StatType.ACC],\r\n    LCK: berserker.currentStats[StatType.LCK]\r\n  });\r\n  \r\n  // Create the target Fae Magician (level 6 in the example)\r\n  const faeSpecies = GAME_DATA.species.fae;\r\n  const magicianRole = GAME_DATA.roles.magician;\r\n  \r\n  const targetStats = calculateAllStats(\r\n    faeSpecies.baseStats,\r\n    {\r\n      [StatType.STR]: GrowthRate.NORMAL,\r\n      [StatType.END]: GrowthRate.NORMAL,\r\n      [StatType.DEF]: GrowthRate.NORMAL,\r\n      [StatType.INT]: GrowthRate.GRADUAL,\r\n      [StatType.SPI]: GrowthRate.GRADUAL,\r\n      [StatType.MDF]: GrowthRate.NORMAL,\r\n      [StatType.SPD]: GrowthRate.NORMAL,\r\n      [StatType.ACC]: GrowthRate.GRADUAL,\r\n      [StatType.LCK]: GrowthRate.NORMAL\r\n    },\r\n    6,\r\n    magicianRole.statModifiers\r\n  );\r\n  \r\n  console.log('Target Stats:', {\r\n    DEF: targetStats[StatType.DEF],\r\n    MDF: targetStats[StatType.MDF]\r\n  });\r\n  \r\n  // Simulate the attack sequence from the example\r\n  const attackerSTR = berserker.currentStats[StatType.STR]; // Should be 44\r\n  const attackerACC = berserker.currentStats[StatType.ACC];\r\n  const targetDEF = targetStats[StatType.DEF]; // Should be 16\r\n  const weaponPower = 40; // Enhanced heirloom sword (30 + 10 from Sharpened Blade)\r\n  \r\n  // Check if attack hits\r\n  const hitChance = 90 + (attackerACC / 10);\r\n  console.log(`Hit chance: ${hitChance.toFixed(1)}%`);\r\n  \r\n  // Check for critical\r\n  const critChance = DERIVED_STATS.criticalHitChance(berserker.currentStats[StatType.LCK]);\r\n  console.log(`Crit chance: ${critChance}%`);\r\n  \r\n  // Calculate weapon damage\r\n  const weaponDamage = calculateBasicAttackDamage(\r\n    attackerSTR,\r\n    weaponPower,\r\n    targetDEF,\r\n    false // Not crit in the example\r\n  );\r\n  \r\n  // Calculate Tempest Slash additional damage\r\n  const tempestDamage = Math.floor(\r\n    attackerSTR * (1 + 30 / 100) * (attackerSTR / targetDEF)\r\n  );\r\n  \r\n  const totalDamage = weaponDamage + tempestDamage;\r\n  \r\n  console.log('Damage Breakdown:');\r\n  console.log(`- Weapon damage: ${weaponDamage}`);\r\n  console.log(`- Tempest Slash: ${tempestDamage}`);\r\n  console.log(`- Total damage: ${totalDamage}`);\r\n  console.log('Expected from example: 326 (169 + 157)');\r\n}\r\n\r\n// ============================================================================\r\n// DEMO: STAT PROGRESSION\r\n// ============================================================================\r\n\r\n/**\r\n * Show how a summon's stats progress from level 5 to 20\r\n */\r\nexport function demonstrateStatProgression(): void {\r\n  console.log('\\n=== Stat Progression Demo ===');\r\n  \r\n  const gignenCard = createGignenWarriorDemo();\r\n  const warriorRole = GAME_DATA.roles.warrior;\r\n  \r\n  console.log('Gignen Warrior stat progression (with Warrior role):');\r\n  console.log('Level | STR | END | DEF | HP  | MV');\r\n  console.log('------|-----|-----|-----|-----|---');\r\n  \r\n  for (let level = 5; level <= 20; level += 5) {\r\n    const stats = calculateAllStats(\r\n      gignenCard.baseStats,\r\n      gignenCard.growthRates,\r\n      level,\r\n      warriorRole.statModifiers\r\n    );\r\n    \r\n    const hp = DERIVED_STATS.maxHp(stats[StatType.END]);\r\n    const mv = DERIVED_STATS.movementSpeed(stats[StatType.SPD]);\r\n    \r\n    console.log(\r\n      `${level.toString().padStart(5)} | ` +\r\n      `${stats[StatType.STR].toString().padStart(3)} | ` +\r\n      `${stats[StatType.END].toString().padStart(3)} | ` +\r\n      `${stats[StatType.DEF].toString().padStart(3)} | ` +\r\n      `${hp.toString().padStart(3)} | ` +\r\n      `${mv.toString().padStart(2)}`\r\n    );\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// DEMO RUNNER\r\n// ============================================================================\r\n\r\n/**\r\n * Run all demos\r\n */\r\nexport function runAllDemos(): void {\r\n  console.log('🎮 Card Game Demo System');\r\n  console.log('========================\\n');\r\n  \r\n  demonstrateStatProgression();\r\n  simulateTempestSlashAttack();\r\n  \r\n  console.log('\\n✅ All demos completed!');\r\n}\r\n\r\n// Export for external use\r\nexport { runAllDemos as default };\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/demo.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_35f83959-94ef-4e76-a836-238b5d6a82a3%22%2C%22undoStop%22%3A%22d19944f6-f46c-4e17-911b-79a8e843c7c0%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}}]},{"requestId":"request_86e4269f-ff10-4508-8ee9-d10459c59db4","stops":[{"entries":[{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/core.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"5a656f8","originalToCurrentEdit":[{"txt":"/**\r\n * Core type definitions for the tactical card game\r\n * These are the foundational types that everything else builds upon\r\n */\r\n\r\n// ============================================================================\r\n// BASIC ENUMS AND CONSTANTS\r\n// ============================================================================\r\n\r\n/** The nine core stats that define a summon's capabilities */\r\nexport enum StatType {\r\n  STR = 'STR', // Strength - Affects physical attack damage\r\n  END = 'END', // Endurance - Affects maximum HP\r\n  DEF = 'DEF', // Defense - Affects physical damage taken\r\n  INT = 'INT', // Intelligence - Affects magical attack damage\r\n  SPI = 'SPI', // Spirit - Affects healing and support abilities\r\n  MDF = 'MDF', // Magic Defense - Affects magical damage taken\r\n  SPD = 'SPD', // Speed - Affects movement speed\r\n  ACC = 'ACC', // Accuracy - Affects chance to hit\r\n  LCK = 'LCK'  // Luck - Affects critical hits and random elements\r\n}\r\n\r\n/** Growth rate categories for stats when leveling up */\r\nexport enum GrowthRate {\r\n  MINIMAL = 'MINIMAL',       // 1 every 2 levels (0.5)\r\n  STEADY = 'STEADY',         // 2 every 3 levels (0.66)\r\n  NORMAL = 'NORMAL',         // 1 every level (1.0)\r\n  GRADUAL = 'GRADUAL',       // 1 + bonus every 3 levels (1.33)\r\n  ACCELERATED = 'ACCELERATED', // 1 + bonus every 2 levels (1.5)\r\n  EXCEPTIONAL = 'EXCEPTIONAL'  // 2 every level (2.0)\r\n}\r\n\r\n/** Card rarity levels that affect generation probability and power */\r\nexport enum Rarity {\r\n  COMMON = 'COMMON',\r\n  UNCOMMON = 'UNCOMMON',\r\n  RARE = 'RARE',\r\n  EPIC = 'EPIC',\r\n  LEGENDARY = 'LEGENDARY'\r\n}\r\n\r\n/** Different types of cards in the game */\r\nexport enum CardType {\r\n  SUMMON = 'SUMMON',\r\n  ROLE = 'ROLE',\r\n  EQUIPMENT = 'EQUIPMENT',\r\n  ACTION = 'ACTION',\r\n  BUILDING = 'BUILDING',\r\n  QUEST = 'QUEST',\r\n  COUNTER = 'COUNTER',\r\n  REACTION = 'REACTION',\r\n  ADVANCE = 'ADVANCE'\r\n}\r\n\r\n/** Equipment slot types */\r\nexport enum EquipmentSlot {\r\n  WEAPON = 'WEAPON',\r\n  OFFHAND = 'OFFHAND',\r\n  ARMOR = 'ARMOR',\r\n  ACCESSORY = 'ACCESSORY'\r\n}\r\n\r\n/** Game speed levels for the priority system */\r\nexport enum Speed {\r\n  ACTION = 'ACTION',     // Slowest - main phase only\r\n  REACTION = 'REACTION', // Medium - can respond to actions\r\n  COUNTER = 'COUNTER'    // Fastest - can respond to anything\r\n}\r\n\r\n/** Damage types for attacks and effects */\r\nexport enum DamageType {\r\n  PHYSICAL = 'PHYSICAL',\r\n  MAGICAL = 'MAGICAL'\r\n}\r\n\r\n/** Damage attributes for elemental effects */\r\nexport enum DamageAttribute {\r\n  NEUTRAL = 'NEUTRAL',\r\n  FIRE = 'FIRE',\r\n  WATER = 'WATER',\r\n  EARTH = 'EARTH',\r\n  AIR = 'AIR',\r\n  LIGHT = 'LIGHT',\r\n  DARK = 'DARK'\r\n}\r\n\r\n/** Turn phases */\r\nexport enum TurnPhase {\r\n  DRAW = 'DRAW',\r\n  LEVEL = 'LEVEL',\r\n  ACTION = 'ACTION',\r\n  END = 'END'\r\n}\r\n\r\n/** Game zones where cards can exist */\r\nexport enum Zone {\r\n  HAND = 'HAND',\r\n  MAIN_DECK = 'MAIN_DECK',\r\n  ADVANCE_DECK = 'ADVANCE_DECK',\r\n  DISCARD_PILE = 'DISCARD_PILE',\r\n  RECHARGE_PILE = 'RECHARGE_PILE',\r\n  IN_PLAY = 'IN_PLAY',\r\n  REMOVED = 'REMOVED'\r\n}\r\n\r\n// ============================================================================\r\n// COORDINATE AND POSITIONING\r\n// ============================================================================\r\n\r\n/** 2D coordinate for game board positioning */\r\nexport interface Coordinate {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\n/** Game board dimensions and territory definitions */\r\nexport const BOARD_CONFIG = {\r\n  WIDTH: 12,\r\n  HEIGHT: 14,\r\n  PLAYER_TERRITORY_ROWS: 3\r\n} as const;\r\n\r\n// ============================================================================\r\n// BASIC INTERFACES\r\n// ============================================================================\r\n\r\n/** Base stats object with all nine stats */\r\nexport interface Stats {\r\n  [StatType.STR]: number;\r\n  [StatType.END]: number;\r\n  [StatType.DEF]: number;\r\n  [StatType.INT]: number;\r\n  [StatType.SPI]: number;\r\n  [StatType.MDF]: number;\r\n  [StatType.SPD]: number;\r\n  [StatType.ACC]: number;\r\n  [StatType.LCK]: number;\r\n}\r\n\r\n/** Growth rates for each stat when leveling */\r\nexport interface GrowthRates {\r\n  [StatType.STR]: GrowthRate;\r\n  [StatType.END]: GrowthRate;\r\n  [StatType.DEF]: GrowthRate;\r\n  [StatType.INT]: GrowthRate;\r\n  [StatType.SPI]: GrowthRate;\r\n  [StatType.MDF]: GrowthRate;\r\n  [StatType.SPD]: GrowthRate;\r\n  [StatType.ACC]: GrowthRate;\r\n  [StatType.LCK]: GrowthRate;\r\n}\r\n\r\n/** Unique identifier for any game entity */\r\nexport type EntityId = string;\r\n\r\n/** Base interface for all identifiable game entities */\r\nexport interface Entity {\r\n  id: EntityId;\r\n  name: string;\r\n  description?: string;\r\n}\r\n\r\n/** Player identification */\r\nexport interface Player extends Entity {\r\n  victoryPoints: number;\r\n}\r\n\r\n// ============================================================================\r\n// UTILITY TYPES\r\n// ============================================================================\r\n\r\n/** Numeric range for validation */\r\nexport interface NumericRange {\r\n  min: number;\r\n  max: number;\r\n}\r\n\r\n/** Probability percentage (0-100) */\r\nexport type Percentage = number;\r\n\r\n/** Level range for summons */\r\nexport const LEVEL_RANGE: NumericRange = { min: 5, max: 20 };\r\n\r\n/** Maximum hand size before discarding */\r\nexport const MAX_HAND_SIZE = 6;\r\n\r\n/** Victory points needed to win */\r\nexport const VICTORY_POINTS_TO_WIN = 3;\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/types/core.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_86e4269f-ff10-4508-8ee9-d10459c59db4%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/cards.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"6b04823","originalToCurrentEdit":[{"txt":"/**\r\n * Card type definitions for all card types in the game\r\n * This includes the data structures for cards and their effects\r\n */\r\n\r\nimport {\r\n  Entity,\r\n  EntityId,\r\n  Rarity,\r\n  CardType,\r\n  EquipmentSlot,\r\n  Speed,\r\n  Stats,\r\n  GrowthRates,\r\n  GrowthRate,\r\n  Percentage\r\n} from './core';\r\n\r\n// ============================================================================\r\n// EFFECT SYSTEM TYPES\r\n// ============================================================================\r\n\r\n/** Base interface for all card effects */\r\nexport interface Effect {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  speed: Speed;\r\n  /** Conditions that must be met to play/activate this effect */\r\n  requirements: EffectRequirement[];\r\n  /** What happens when this effect resolves */\r\n  resolution: EffectResolution;\r\n}\r\n\r\n/** Requirement types for playing cards or activating effects */\r\nexport interface EffectRequirement {\r\n  type: 'SUMMON_IN_PLAY' | 'SUMMON_ROLE' | 'SUMMON_LEVEL' | 'SUMMON_SPECIES' | \r\n        'TERRITORY_CONTROL' | 'CARD_IN_HAND' | 'CUSTOM';\r\n  parameters: Record<string, any>;\r\n  description: string;\r\n}\r\n\r\n/** What happens when an effect resolves */\r\nexport interface EffectResolution {\r\n  type: 'DAMAGE' | 'HEAL' | 'STAT_MODIFIER' | 'MOVEMENT' | 'SUMMON' | \r\n        'DRAW_CARDS' | 'LEVEL_UP' | 'DESTROY' | 'CUSTOM';\r\n  parameters: Record<string, any>;\r\n  targetType: 'SINGLE' | 'MULTIPLE' | 'ALL' | 'AREA';\r\n}\r\n\r\n/** Trigger conditions for automatic effects */\r\nexport interface Trigger {\r\n  event: 'ON_PLAY' | 'ON_DEFEAT' | 'ON_DAMAGE' | 'ON_HEAL' | 'ON_MOVE' | \r\n         'TURN_START' | 'TURN_END' | 'PHASE_START' | 'PHASE_END' | 'CUSTOM';\r\n  conditions?: EffectRequirement[];\r\n  effect: Effect;\r\n}\r\n\r\n// ============================================================================\r\n// BASE CARD INTERFACE\r\n// ============================================================================\r\n\r\n/** Base interface for all cards */\r\nexport interface BaseCard extends Entity {\r\n  cardType: CardType;\r\n  rarity: Rarity;\r\n  /** Visual representation data */\r\n  artwork?: string;\r\n  /** Card effects and abilities */\r\n  effects: Effect[];\r\n  /** Automatic triggers */\r\n  triggers: Trigger[];\r\n  /** Cost to play the card (if applicable) */\r\n  cost?: number;\r\n  /** Tags for categorization and searching */\r\n  tags: string[];\r\n}\r\n\r\n// ============================================================================\r\n// SUMMON CARDS\r\n// ============================================================================\r\n\r\n/** Species definition for summon generation */\r\nexport interface SummonSpecies extends Entity {\r\n  /** Base stats for this species */\r\n  baseStats: Stats;\r\n  /** Visual representation */\r\n  artwork: string;\r\n  /** Species-specific abilities */\r\n  speciesAbilities: Effect[];\r\n}\r\n\r\n/** Generated summon card (unique instance) */\r\nexport interface SummonCard extends BaseCard {\r\n  cardType: CardType.SUMMON;\r\n  /** Reference to the species template */\r\n  speciesId: EntityId;\r\n  /** Generated stats for this specific summon */\r\n  baseStats: Stats;\r\n  /** Generated growth rates for this specific summon */\r\n  growthRates: GrowthRates;\r\n  /** Generated at pack opening time */\r\n  generatedAt: Date;\r\n}\r\n\r\n// ============================================================================\r\n// ROLE CARDS\r\n// ============================================================================\r\n\r\n/** Role cards define class/job for summons */\r\nexport interface RoleCard extends BaseCard {\r\n  cardType: CardType.ROLE;\r\n  /** Tier level of this role (1 = basic, 2+ = advanced) */\r\n  tier: number;\r\n  /** Stat modifiers applied when this role is active */\r\n  statModifiers: Partial<Stats>;\r\n  /** Role-specific abilities */\r\n  roleAbilities: Effect[];\r\n}\r\n\r\n// ============================================================================\r\n// EQUIPMENT CARDS\r\n// ============================================================================\r\n\r\n/** Equipment cards enhance summons */\r\nexport interface EquipmentCard extends BaseCard {\r\n  cardType: CardType.EQUIPMENT;\r\n  /** Which slot this equipment occupies */\r\n  slot: EquipmentSlot;\r\n  /** Stat bonuses provided */\r\n  statBonuses: Partial<Stats>;\r\n  /** Base power for weapons */\r\n  basePower?: number;\r\n  /** Attack range for weapons */\r\n  attackRange?: number;\r\n  /** Equipment-specific abilities */\r\n  equipmentAbilities: Effect[];\r\n}\r\n\r\n// ============================================================================\r\n// ACTION CARDS\r\n// ============================================================================\r\n\r\n/** Action cards are played during action phase */\r\nexport interface ActionCard extends BaseCard {\r\n  cardType: CardType.ACTION;\r\n  /** Where this card goes after resolution */\r\n  destinationAfterUse: 'DISCARD' | 'RECHARGE' | 'REMOVED';\r\n  /** Main effect of the action */\r\n  actionEffect: Effect;\r\n}\r\n\r\n// ============================================================================\r\n// BUILDING CARDS\r\n// ============================================================================\r\n\r\n/** Building cards create permanent effects on the board */\r\nexport interface BuildingCard extends BaseCard {\r\n  cardType: CardType.BUILDING;\r\n  /** Size requirements for placement */\r\n  dimensions: {\r\n    width: number;\r\n    height: number;\r\n  };\r\n  /** Is this building placed face down initially? */\r\n  isHidden: boolean;\r\n  /** Ongoing effects while in play */\r\n  ongoingEffects: Effect[];\r\n  /** Destruction conditions */\r\n  destructionConditions?: EffectRequirement[];\r\n}\r\n\r\n// ============================================================================\r\n// QUEST CARDS\r\n// ============================================================================\r\n\r\n/** Quest cards provide objectives for rewards */\r\nexport interface QuestCard extends BaseCard {\r\n  cardType: CardType.QUEST;\r\n  /** Objective that must be completed */\r\n  objective: EffectRequirement;\r\n  /** Reward for completing the quest */\r\n  reward: Effect;\r\n  /** Can this quest be completed multiple times? */\r\n  repeatable: boolean;\r\n}\r\n\r\n// ============================================================================\r\n// COUNTER AND REACTION CARDS\r\n// ============================================================================\r\n\r\n/** Counter cards respond to specific triggers */\r\nexport interface CounterCard extends BaseCard {\r\n  cardType: CardType.COUNTER;\r\n  /** Must be set face down before activation */\r\n  mustBeSet: true;\r\n  /** Specific trigger that allows activation */\r\n  activationTrigger: Trigger;\r\n  /** Additional cost to activate */\r\n  activationCost?: Effect;\r\n}\r\n\r\n/** Reaction cards provide quick responses */\r\nexport interface ReactionCard extends BaseCard {\r\n  cardType: CardType.REACTION;\r\n  /** Can be played from hand or set face down */\r\n  canPlayFromHand: boolean;\r\n  /** Quick response effect */\r\n  reactionEffect: Effect;\r\n}\r\n\r\n// ============================================================================\r\n// ADVANCE CARDS\r\n// ============================================================================\r\n\r\n/** Advance cards evolve summons to higher tiers */\r\nexport interface AdvanceCard extends BaseCard {\r\n  cardType: CardType.ADVANCE;\r\n  /** Requirements for the target summon */\r\n  summonRequirements: EffectRequirement[];\r\n  /** New role granted by advancement */\r\n  newRole: RoleCard;\r\n  /** Additional effects from advancement */\r\n  advancementEffects: Effect[];\r\n}\r\n\r\n// ============================================================================\r\n// UNION TYPE FOR ALL CARDS\r\n// ============================================================================\r\n\r\n/** Union type representing any card in the game */\r\nexport type Card = \r\n  | SummonCard\r\n  | RoleCard\r\n  | EquipmentCard\r\n  | ActionCard\r\n  | BuildingCard\r\n  | QuestCard\r\n  | CounterCard\r\n  | ReactionCard\r\n  | AdvanceCard;\r\n\r\n// ============================================================================\r\n// CARD COLLECTION TYPES\r\n// ============================================================================\r\n\r\n/** Player's card collection */\r\nexport interface CardCollection {\r\n  playerId: EntityId;\r\n  cards: Map<EntityId, Card>;\r\n  /** Quick lookup by card type */\r\n  cardsByType: Map<CardType, EntityId[]>;\r\n  /** Quick lookup by rarity */\r\n  cardsByRarity: Map<Rarity, EntityId[]>;\r\n}\r\n\r\n/** Deck composition for a game */\r\nexport interface Deck {\r\n  playerId: EntityId;\r\n  name: string;\r\n  /** The 3 summon slots */\r\n  summonSlots: SummonSlot[];\r\n  /** Main deck cards */\r\n  mainDeck: EntityId[];\r\n  /** Advance deck cards */\r\n  advanceDeck: EntityId[];\r\n  /** When this deck was created/modified */\r\n  lastModified: Date;\r\n}\r\n\r\n/** A single summon slot configuration */\r\nexport interface SummonSlot {\r\n  /** The primary summon card */\r\n  summon: EntityId;\r\n  /** The role card applied */\r\n  role: EntityId;\r\n  /** Equipment in each slot */\r\n  equipment: {\r\n    [EquipmentSlot.WEAPON]?: EntityId;\r\n    [EquipmentSlot.OFFHAND]?: EntityId;\r\n    [EquipmentSlot.ARMOR]?: EntityId;\r\n    [EquipmentSlot.ACCESSORY]?: EntityId;\r\n  };\r\n}\r\n\r\n// ============================================================================\r\n// CARD GENERATION TYPES\r\n// ============================================================================\r\n\r\n/** Configuration for generating summon cards */\r\nexport interface SummonGenerationConfig {\r\n  species: SummonSpecies;\r\n  rarity: Rarity;\r\n  /** Probability tables for growth rates by rarity */\r\n  growthRateProbabilities: Record<Rarity, Record<GrowthRate, Percentage>>;\r\n}\r\n\r\n/** Pack opening configuration */\r\nexport interface PackConfig {\r\n  name: string;\r\n  cardCount: number;\r\n  rarityDistribution: Record<Rarity, Percentage>;\r\n  availableSpecies: EntityId[];\r\n  cost: number; // in-game currency\r\n}\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/types/cards.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_86e4269f-ff10-4508-8ee9-d10459c59db4%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/game-state.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"86e03bd","originalToCurrentEdit":[{"txt":"/**\r\n * Game state types for managing the active game session\r\n * This includes the board state, player state, and turn management\r\n */\r\n\r\nimport {\r\n  Entity,\r\n  EntityId,\r\n  Player,\r\n  TurnPhase,\r\n  Zone,\r\n  Coordinate,\r\n  Stats,\r\n  GrowthRates\r\n} from './core';\r\nimport { Card, Deck, SummonSlot } from './cards';\r\n\r\n// ============================================================================\r\n// SUMMON UNIT (IN-PLAY SUMMON)\r\n// ============================================================================\r\n\r\n/** A summon unit that exists on the game board */\r\nexport interface SummonUnit extends Entity {\r\n  /** Reference to the original summon card */\r\n  originalCardId: EntityId;\r\n  /** Current owner */\r\n  playerId: EntityId;\r\n  /** Current position on the board */\r\n  position: Coordinate;\r\n  /** Current level (5-20) */\r\n  level: number;\r\n  /** Current HP */\r\n  currentHp: number;\r\n  /** Maximum HP at current level */\r\n  maxHp: number;\r\n  /** Current calculated stats */\r\n  currentStats: Stats;\r\n  /** Base stats from the original card */\r\n  baseStats: Stats;\r\n  /** Growth rates from the original card */\r\n  growthRates: GrowthRates;\r\n  /** Currently equipped role */\r\n  currentRole: EntityId;\r\n  /** Currently equipped items */\r\n  equipment: {\r\n    weapon?: EntityId;\r\n    offhand?: EntityId;\r\n    armor?: EntityId;\r\n    accessory?: EntityId;\r\n  };\r\n  /** Active status effects */\r\n  statusEffects: StatusEffect[];\r\n  /** Movement used this turn */\r\n  movementUsed: number;\r\n  /** Has attacked this turn */\r\n  hasAttacked: boolean;\r\n  /** Temporary modifiers from card effects */\r\n  temporaryModifiers: TemporaryModifier[];\r\n}\r\n\r\n/** Status effects that can be applied to summon units */\r\nexport interface StatusEffect {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  /** How many turns remaining */\r\n  duration: number;\r\n  /** Stat modifiers */\r\n  statModifiers?: Partial<Stats>;\r\n  /** Special conditions */\r\n  conditions?: {\r\n    immobilized?: boolean;\r\n    cannotAttack?: boolean;\r\n    cannotUseAbilities?: boolean;\r\n  };\r\n  /** Source of this effect */\r\n  sourceId: EntityId;\r\n}\r\n\r\n/** Temporary modifiers from card effects */\r\nexport interface TemporaryModifier {\r\n  id: string;\r\n  name: string;\r\n  /** When this modifier expires */\r\n  expiresAt: 'END_OF_TURN' | 'END_OF_OPPONENT_TURN' | 'PERMANENT' | number;\r\n  /** Stat changes */\r\n  statModifiers?: Partial<Stats>;\r\n  /** Other property changes */\r\n  propertyModifiers?: Record<string, any>;\r\n  /** Source of this modifier */\r\n  sourceId: EntityId;\r\n}\r\n\r\n// ============================================================================\r\n// BOARD STATE\r\n// ============================================================================\r\n\r\n/** A space on the game board */\r\nexport interface BoardSpace {\r\n  coordinate: Coordinate;\r\n  /** Which player controls this territory (if any) */\r\n  controlledBy?: EntityId;\r\n  /** Summon unit occupying this space (if any) */\r\n  occupiedBy?: EntityId;\r\n  /** Buildings covering this space */\r\n  buildings: EntityId[];\r\n  /** Is this space valid for summon placement */\r\n  isValidSummonSpace: boolean;\r\n  /** Special terrain effects */\r\n  terrainEffects?: string[];\r\n}\r\n\r\n/** The complete game board state */\r\nexport interface GameBoard {\r\n  /** 12x14 grid of spaces */\r\n  spaces: BoardSpace[][];\r\n  /** Active summon units on the board */\r\n  summonUnits: Map<EntityId, SummonUnit>;\r\n  /** Active buildings on the board */\r\n  buildings: Map<EntityId, ActiveBuilding>;\r\n}\r\n\r\n/** A building that has been played and is active on the board */\r\nexport interface ActiveBuilding extends Entity {\r\n  /** Reference to the original building card */\r\n  originalCardId: EntityId;\r\n  /** Player who controls this building */\r\n  playerId: EntityId;\r\n  /** Spaces this building occupies */\r\n  occupiedSpaces: Coordinate[];\r\n  /** Is this building face down (hidden)? */\r\n  isHidden: boolean;\r\n  /** Turn when this building was played */\r\n  playedOnTurn: number;\r\n  /** Active timers for destruction */\r\n  destructionTimers?: {\r\n    type: 'TURN_COUNT' | 'CONDITION';\r\n    value: number;\r\n  }[];\r\n}\r\n\r\n// ============================================================================\r\n// PLAYER GAME STATE\r\n// ============================================================================\r\n\r\n/** A player's state during an active game */\r\nexport interface PlayerGameState {\r\n  player: Player;\r\n  /** Cards in different zones */\r\n  zones: {\r\n    [Zone.HAND]: EntityId[];\r\n    [Zone.MAIN_DECK]: EntityId[];\r\n    [Zone.ADVANCE_DECK]: EntityId[];\r\n    [Zone.DISCARD_PILE]: EntityId[];\r\n    [Zone.RECHARGE_PILE]: EntityId[];\r\n    [Zone.IN_PLAY]: EntityId[];\r\n    [Zone.REMOVED]: EntityId[];\r\n  };\r\n  /** Original deck configuration */\r\n  originalDeck: Deck;\r\n  /** Summon slots as configured in deck */\r\n  summonSlots: SummonSlot[];\r\n  /** Which summon slots have been played this game */\r\n  playedSummonSlots: boolean[];\r\n  /** Has used turn summon this turn */\r\n  hasUsedTurnSummon: boolean;\r\n  /** Face-down cards in play (counters, reactions, etc.) */\r\n  faceDownCards: Map<EntityId, Coordinate>;\r\n}\r\n\r\n// ============================================================================\r\n// STACK SYSTEM\r\n// ============================================================================\r\n\r\n/** An action waiting to resolve on the stack */\r\nexport interface StackEntry {\r\n  id: string;\r\n  /** Player who initiated this action */\r\n  playerId: EntityId;\r\n  /** Type of action */\r\n  actionType: 'PLAY_CARD' | 'ACTIVATE_ABILITY' | 'ATTACK' | 'MOVE' | 'TRIGGER_EFFECT';\r\n  /** Source card or ability */\r\n  sourceId: EntityId;\r\n  /** Target(s) of this action */\r\n  targets: ActionTarget[];\r\n  /** Speed level of this action */\r\n  speed: import('./core').Speed;\r\n  /** Additional parameters */\r\n  parameters: Record<string, any>;\r\n  /** When this was added to the stack */\r\n  timestamp: number;\r\n}\r\n\r\n/** Target for an action */\r\nexport interface ActionTarget {\r\n  type: 'SUMMON_UNIT' | 'CARD' | 'PLAYER' | 'COORDINATE' | 'BUILDING';\r\n  id?: EntityId;\r\n  coordinate?: Coordinate;\r\n  parameters?: Record<string, any>;\r\n}\r\n\r\n/** The game's action stack */\r\nexport interface ActionStack {\r\n  entries: StackEntry[];\r\n  /** Is the stack currently resolving */\r\n  isResolving: boolean;\r\n  /** Current priority holder */\r\n  priorityPlayerId: EntityId;\r\n}\r\n\r\n// ============================================================================\r\n// TURN MANAGEMENT\r\n// ============================================================================\r\n\r\n/** Turn state management */\r\nexport interface TurnState {\r\n  /** Current turn number */\r\n  turnNumber: number;\r\n  /** Active player */\r\n  activePlayerId: EntityId;\r\n  /** Current phase */\r\n  currentPhase: TurnPhase;\r\n  /** Phase-specific data */\r\n  phaseData?: Record<string, any>;\r\n  /** Actions taken this turn */\r\n  actionsTaken: StackEntry[];\r\n}\r\n\r\n// ============================================================================\r\n// COMPLETE GAME STATE\r\n// ============================================================================\r\n\r\n/** The complete state of an active game */\r\nexport interface GameState {\r\n  /** Unique game identifier */\r\n  gameId: EntityId;\r\n  /** Players in this game */\r\n  players: Map<EntityId, PlayerGameState>;\r\n  /** The game board */\r\n  board: GameBoard;\r\n  /** Action stack */\r\n  stack: ActionStack;\r\n  /** Turn management */\r\n  turn: TurnState;\r\n  /** All cards used in this game */\r\n  gameCards: Map<EntityId, Card>;\r\n  /** Game configuration */\r\n  config: GameConfig;\r\n  /** Game status */\r\n  status: GameStatus;\r\n  /** When the game started */\r\n  startedAt: Date;\r\n  /** Game history for replay */\r\n  history: GameEvent[];\r\n}\r\n\r\n/** Game configuration settings */\r\nexport interface GameConfig {\r\n  /** Game format (currently only 3v3 supported) */\r\n  format: '3v3';\r\n  /** Time limits */\r\n  timeLimits?: {\r\n    turnTimeLimit: number; // seconds\r\n    gameTimeLimit: number; // seconds\r\n  };\r\n  /** Rule variations */\r\n  rules: {\r\n    allowSpectators: boolean;\r\n    allowUndo: boolean;\r\n    allowPause: boolean;\r\n  };\r\n}\r\n\r\n/** Overall game status */\r\nexport interface GameStatus {\r\n  state: 'WAITING' | 'IN_PROGRESS' | 'COMPLETED' | 'PAUSED' | 'ABANDONED';\r\n  /** Winner if game is completed */\r\n  winnerId?: EntityId;\r\n  /** Reason for game end */\r\n  endReason?: 'VICTORY_POINTS' | 'TIMEOUT' | 'FORFEIT' | 'DRAW';\r\n  /** Current scores */\r\n  scores: Map<EntityId, number>;\r\n}\r\n\r\n/** Events that occur during the game for history/replay */\r\nexport interface GameEvent {\r\n  id: string;\r\n  timestamp: Date;\r\n  playerId: EntityId;\r\n  eventType: 'CARD_PLAYED' | 'ATTACK' | 'MOVE' | 'ABILITY_ACTIVATED' | \r\n             'PHASE_CHANGE' | 'TURN_CHANGE' | 'GAME_END';\r\n  details: Record<string, any>;\r\n  /** Stack state when this event occurred */\r\n  stackSnapshot?: StackEntry[];\r\n}\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/types/game-state.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_86e4269f-ff10-4508-8ee9-d10459c59db4%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/calculations.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"504a494","originalToCurrentEdit":[{"txt":"/**\r\n * Calculation and formula types for game mechanics\r\n * This includes damage calculations, stat calculations, and other formulas\r\n */\r\n\r\nimport { Stats, GrowthRate, Percentage, StatType } from './core';\r\nimport { SummonUnit } from './game-state';\r\n\r\n// ============================================================================\r\n// STAT CALCULATION TYPES\r\n// ============================================================================\r\n\r\n/** Configuration for calculating a summon's stats at a given level */\r\nexport interface StatCalculationConfig {\r\n  baseStat: number;\r\n  growthRate: GrowthRate;\r\n  level: number;\r\n  roleModifier: number;\r\n  equipmentBonus: number;\r\n  temporaryModifiers: number;\r\n}\r\n\r\n/** Result of a stat calculation */\r\nexport interface StatCalculationResult {\r\n  finalValue: number;\r\n  breakdown: {\r\n    base: number;\r\n    growth: number;\r\n    role: number;\r\n    equipment: number;\r\n    temporary: number;\r\n  };\r\n}\r\n\r\n/** Growth rate numeric values for calculations */\r\nexport const GROWTH_RATE_VALUES: Record<GrowthRate, number> = {\r\n  [GrowthRate.MINIMAL]: 0.5,      // 1 every 2 levels\r\n  [GrowthRate.STEADY]: 0.66,      // 2 every 3 levels  \r\n  [GrowthRate.NORMAL]: 1.0,       // 1 every level\r\n  [GrowthRate.GRADUAL]: 1.33,     // 1 + bonus every 3 levels\r\n  [GrowthRate.ACCELERATED]: 1.5,  // 1 + bonus every 2 levels\r\n  [GrowthRate.EXCEPTIONAL]: 2.0   // 2 every level\r\n};\r\n\r\n// ============================================================================\r\n// DERIVED STAT CALCULATIONS\r\n// ============================================================================\r\n\r\n/** Configuration for calculating derived stats like HP, movement, etc. */\r\nexport interface DerivedStatConfig {\r\n  /** Base value before modifications */\r\n  baseValue: number;\r\n  /** Primary stat that influences this derived stat */\r\n  primaryStat: StatType;\r\n  /** Formula type to use */\r\n  formulaType: 'LINEAR' | 'QUADRATIC' | 'EXPONENTIAL' | 'CUSTOM';\r\n  /** Additional parameters for the formula */\r\n  parameters: Record<string, number>;\r\n}\r\n\r\n/** Formulas for calculating derived stats */\r\nexport interface DerivedStatFormulas {\r\n  /** Max HP = 50 + Floor(END ^ 1.5) */\r\n  maxHp: (endurance: number) => number;\r\n  /** Movement Speed = 2 + Floor((SPD - 10) / 5) */\r\n  movementSpeed: (speed: number) => number;\r\n  /** Basic Attack To Hit = 90 + (ACC / 10) */\r\n  basicAttackToHit: (accuracy: number) => number;\r\n  /** Critical Hit Chance = Floor((LCK * 0.3375) + 1.65) */\r\n  criticalHitChance: (luck: number) => number;\r\n}\r\n\r\n// ============================================================================\r\n// COMBAT CALCULATION TYPES\r\n// ============================================================================\r\n\r\n/** Parameters for damage calculation */\r\nexport interface DamageCalculationParams {\r\n  /** The attacking unit or effect source */\r\n  attacker: SummonUnit | EffectSource;\r\n  /** The target being damaged */\r\n  target: SummonUnit;\r\n  /** Base power of the attack/effect */\r\n  basePower: number;\r\n  /** Type of damage */\r\n  damageType: 'PHYSICAL' | 'MAGICAL';\r\n  /** Elemental attribute */\r\n  attribute: 'NEUTRAL' | 'FIRE' | 'WATER' | 'EARTH' | 'AIR' | 'LIGHT' | 'DARK';\r\n  /** Custom damage formula (overrides default) */\r\n  customFormula?: string;\r\n  /** Can this attack crit? */\r\n  canCrit: boolean;\r\n  /** Crit multiplier if it crits */\r\n  critMultiplier: number;\r\n}\r\n\r\n/** Source of an effect that isn't a summon unit */\r\nexport interface EffectSource {\r\n  id: string;\r\n  name: string;\r\n  /** Effective stats for calculation purposes */\r\n  effectiveStats: Partial<Stats>;\r\n  /** Source type */\r\n  sourceType: 'CARD_EFFECT' | 'BUILDING' | 'ENVIRONMENTAL';\r\n}\r\n\r\n/** Result of a damage calculation */\r\nexport interface DamageCalculationResult {\r\n  /** Final damage amount */\r\n  finalDamage: number;\r\n  /** Did the attack hit? */\r\n  didHit: boolean;\r\n  /** Did the attack crit? */\r\n  didCrit: boolean;\r\n  /** Breakdown of the calculation */\r\n  breakdown: {\r\n    baseDamage: number;\r\n    attackerStat: number;\r\n    defenderStat: number;\r\n    critMultiplier: number;\r\n    otherModifiers: number;\r\n  };\r\n  /** Hit chance that was rolled against */\r\n  hitChance: Percentage;\r\n  /** Crit chance that was rolled against */\r\n  critChance: Percentage;\r\n  /** Random values that were rolled */\r\n  rolls: {\r\n    hitRoll: number;\r\n    critRoll: number;\r\n  };\r\n}\r\n\r\n/** Parameters for healing calculation */\r\nexport interface HealingCalculationParams {\r\n  /** The healing source */\r\n  healer: SummonUnit | EffectSource;\r\n  /** The target being healed */\r\n  target: SummonUnit;\r\n  /** Base power of the healing */\r\n  basePower: number;\r\n  /** Custom healing formula */\r\n  customFormula?: string;\r\n  /** Can this heal crit? */\r\n  canCrit: boolean;\r\n  /** Crit multiplier if it crits */\r\n  critMultiplier: number;\r\n}\r\n\r\n/** Result of a healing calculation */\r\nexport interface HealingCalculationResult {\r\n  /** Final healing amount */\r\n  finalHealing: number;\r\n  /** Did the heal crit? */\r\n  didCrit: boolean;\r\n  /** Breakdown of the calculation */\r\n  breakdown: {\r\n    baseHealing: number;\r\n    healerStat: number;\r\n    critMultiplier: number;\r\n    otherModifiers: number;\r\n  };\r\n  /** Actual HP restored (accounting for max HP) */\r\n  actualHpRestored: number;\r\n}\r\n\r\n// ============================================================================\r\n// ACCURACY AND HIT CALCULATION\r\n// ============================================================================\r\n\r\n/** Parameters for hit chance calculation */\r\nexport interface HitCalculationParams {\r\n  /** Base accuracy of the attack/effect */\r\n  baseAccuracy: number;\r\n  /** Attacker's accuracy stat */\r\n  attackerAccuracy: number;\r\n  /** Target's evasion modifiers */\r\n  targetEvasion?: number;\r\n  /** Custom hit formula */\r\n  customFormula?: string;\r\n  /** Environmental modifiers */\r\n  environmentModifiers?: number;\r\n}\r\n\r\n/** Standard hit calculation formulas */\r\nexport interface HitFormulas {\r\n  /** Standard: base_accuracy + (attacker.ACC / 10) */\r\n  standard: (params: HitCalculationParams) => number;\r\n  /** Enhanced: base_accuracy + (attacker.ACC / 10) + (attacker.LCK / 10) */\r\n  enhanced: (params: HitCalculationParams) => number;\r\n  /** Always hits */\r\n  automatic: (params: HitCalculationParams) => 100;\r\n  /** Custom formula evaluator */\r\n  custom: (formula: string, params: HitCalculationParams) => number;\r\n}\r\n\r\n// ============================================================================\r\n// FORMULA EVALUATION SYSTEM\r\n// ============================================================================\r\n\r\n/** Context for evaluating custom formulas */\r\nexport interface FormulaContext {\r\n  /** The caster/source of the effect */\r\n  caster?: SummonUnit;\r\n  /** The target of the effect */\r\n  target?: SummonUnit;\r\n  /** Additional parameters */\r\n  parameters: Record<string, any>;\r\n  /** Current game state references */\r\n  gameContext: {\r\n    turnNumber: number;\r\n    activePlayerId: string;\r\n    boardState: any; // Reference to board for positional calculations\r\n  };\r\n}\r\n\r\n/** A parsed and executable formula */\r\nexport interface ParsedFormula {\r\n  /** Original formula string */\r\n  original: string;\r\n  /** Parsed tokens */\r\n  tokens: FormulaToken[];\r\n  /** Variables referenced in the formula */\r\n  variables: string[];\r\n  /** Execute this formula with given context */\r\n  execute: (context: FormulaContext) => number;\r\n}\r\n\r\n/** Token types for formula parsing */\r\nexport interface FormulaToken {\r\n  type: 'NUMBER' | 'VARIABLE' | 'OPERATOR' | 'FUNCTION' | 'PARENTHESIS';\r\n  value: string | number;\r\n  position: number;\r\n}\r\n\r\n/** Available functions in formulas */\r\nexport interface FormulaFunctions {\r\n  /** Mathematical functions */\r\n  floor: (value: number) => number;\r\n  ceil: (value: number) => number;\r\n  round: (value: number) => number;\r\n  min: (a: number, b: number) => number;\r\n  max: (a: number, b: number) => number;\r\n  abs: (value: number) => number;\r\n  \r\n  /** Game-specific functions */\r\n  distance: (pos1: {x: number, y: number}, pos2: {x: number, y: number}) => number;\r\n  random: (min: number, max: number) => number;\r\n  summonCount: (playerId: string) => number;\r\n}\r\n\r\n// ============================================================================\r\n// PROBABILITY AND RANDOM GENERATION\r\n// ============================================================================\r\n\r\n/** Configuration for random generation with weights */\r\nexport interface WeightedRandomConfig<T> {\r\n  options: Array<{\r\n    value: T;\r\n    weight: number;\r\n  }>;\r\n}\r\n\r\n/** Random number generation context */\r\nexport interface RandomContext {\r\n  /** Seed for deterministic randomness (useful for replays) */\r\n  seed?: number;\r\n  /** Source of the randomness for tracking */\r\n  source: string;\r\n  /** Additional context */\r\n  context?: Record<string, any>;\r\n}\r\n\r\n/** Result of a random roll */\r\nexport interface RandomResult {\r\n  /** The value that was rolled */\r\n  value: number;\r\n  /** The range it was rolled in */\r\n  range: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  /** Context information */\r\n  context: RandomContext;\r\n  /** Timestamp of the roll */\r\n  timestamp: Date;\r\n}\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/types/calculations.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_86e4269f-ff10-4508-8ee9-d10459c59db4%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/index.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"e68526e","originalToCurrentEdit":[{"txt":"/**\r\n * Central export point for all game types\r\n * Import from here to get access to all type definitions\r\n */\r\n\r\n// Core types and enums\r\nexport * from './core';\r\n\r\n// Card-related types\r\nexport * from './cards';\r\n\r\n// Game state management\r\nexport * from './game-state';\r\n\r\n// Calculations and formulas\r\nexport * from './calculations';\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/types/index.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_86e4269f-ff10-4508-8ee9-d10459c59db4%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/data/core-cards.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"4dad2b6","originalToCurrentEdit":[{"txt":"/**\r\n * Core game data including species, roles, and equipment definitions\r\n * This represents the foundational cards that don't change between games\r\n */\r\n\r\nimport {\r\n  SummonSpecies,\r\n  RoleCard,\r\n  EquipmentCard\r\n} from '../types';\r\nimport {\r\n  StatType,\r\n  CardType,\r\n  EquipmentSlot,\r\n  Rarity\r\n} from '../types/core';\r\n\r\n// ============================================================================\r\n// SUMMON SPECIES DEFINITIONS\r\n// ============================================================================\r\n\r\nexport const SUMMON_SPECIES: Record<string, SummonSpecies> = {\r\n  'gignen': {\r\n    id: 'species-gignen',\r\n    name: 'Gignen',\r\n    description: 'A balanced humanoid species known for their adaptability and determination.',\r\n    baseStats: {\r\n      [StatType.STR]: 12,\r\n      [StatType.END]: 10,\r\n      [StatType.DEF]: 11,\r\n      [StatType.INT]: 11,\r\n      [StatType.SPI]: 10,\r\n      [StatType.MDF]: 8,\r\n      [StatType.SPD]: 10,\r\n      [StatType.ACC]: 9,\r\n      [StatType.LCK]: 12\r\n    },\r\n    artwork: 'gignen-default',\r\n    speciesAbilities: [] // No inherent species abilities for now\r\n  },\r\n\r\n  'fae': {\r\n    id: 'species-fae',\r\n    name: 'Fae',\r\n    description: 'Mystical beings with strong magical affinity and graceful movements.',\r\n    baseStats: {\r\n      [StatType.STR]: 8,\r\n      [StatType.END]: 10,\r\n      [StatType.DEF]: 9,\r\n      [StatType.INT]: 15,\r\n      [StatType.SPI]: 16,\r\n      [StatType.MDF]: 12,\r\n      [StatType.SPD]: 13,\r\n      [StatType.ACC]: 11,\r\n      [StatType.LCK]: 10\r\n    },\r\n    artwork: 'fae-default',\r\n    speciesAbilities: []\r\n  },\r\n\r\n  'wilderling': {\r\n    id: 'species-wilderling',\r\n    name: 'Wilderling',\r\n    description: 'Swift forest dwellers with exceptional speed and accuracy.',\r\n    baseStats: {\r\n      [StatType.STR]: 11,\r\n      [StatType.END]: 12,\r\n      [StatType.DEF]: 8,\r\n      [StatType.INT]: 9,\r\n      [StatType.SPI]: 8,\r\n      [StatType.MDF]: 7,\r\n      [StatType.SPD]: 18,\r\n      [StatType.ACC]: 16,\r\n      [StatType.LCK]: 12\r\n    },\r\n    artwork: 'wilderling-default',\r\n    speciesAbilities: []\r\n  },\r\n\r\n  'stoneheart': {\r\n    id: 'species-stoneheart',\r\n    name: 'Stoneheart',\r\n    description: 'Rock-skinned beings with incredible durability and strength.',\r\n    baseStats: {\r\n      [StatType.STR]: 14,\r\n      [StatType.END]: 16,\r\n      [StatType.DEF]: 15,\r\n      [StatType.INT]: 6,\r\n      [StatType.SPI]: 8,\r\n      [StatType.MDF]: 10,\r\n      [StatType.SPD]: 7,\r\n      [StatType.ACC]: 8,\r\n      [StatType.LCK]: 9\r\n    },\r\n    artwork: 'stoneheart-default',\r\n    speciesAbilities: []\r\n  }\r\n};\r\n\r\n// ============================================================================\r\n// ROLE CARD DEFINITIONS\r\n// ============================================================================\r\n\r\nexport const ROLE_CARDS: Record<string, RoleCard> = {\r\n  // Tier 1 Roles\r\n  'warrior': {\r\n    id: 'role-warrior',\r\n    name: 'Warrior',\r\n    description: 'A frontline fighter specializing in physical combat and defense.',\r\n    cardType: CardType.ROLE,\r\n    rarity: Rarity.COMMON,\r\n    tier: 1,\r\n    statModifiers: {\r\n      [StatType.STR]: 2,\r\n      [StatType.DEF]: 2,\r\n      [StatType.END]: 1\r\n    },\r\n    roleAbilities: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['melee', 'physical', 'tank']\r\n  },\r\n\r\n  'scout': {\r\n    id: 'role-scout',\r\n    name: 'Scout',\r\n    description: 'A swift reconnaissance specialist with high mobility and accuracy.',\r\n    cardType: CardType.ROLE,\r\n    rarity: Rarity.COMMON,\r\n    tier: 1,\r\n    statModifiers: {\r\n      [StatType.SPD]: 3,\r\n      [StatType.ACC]: 2,\r\n      [StatType.LCK]: 1\r\n    },\r\n    roleAbilities: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['ranged', 'mobility', 'accuracy']\r\n  },\r\n\r\n  'magician': {\r\n    id: 'role-magician',\r\n    name: 'Magician',\r\n    description: 'A spellcaster who harnesses magical energies for offense and support.',\r\n    cardType: CardType.ROLE,\r\n    rarity: Rarity.COMMON,\r\n    tier: 1,\r\n    statModifiers: {\r\n      [StatType.INT]: 3,\r\n      [StatType.SPI]: 2,\r\n      [StatType.MDF]: 1\r\n    },\r\n    roleAbilities: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['magical', 'ranged', 'support']\r\n  },\r\n\r\n  // Tier 2 Roles (Advanced)\r\n  'berserker': {\r\n    id: 'role-berserker',\r\n    name: 'Berserker',\r\n    description: 'A fierce warrior who trades defense for overwhelming offensive power.',\r\n    cardType: CardType.ROLE,\r\n    rarity: Rarity.UNCOMMON,\r\n    tier: 2,\r\n    statModifiers: {\r\n      [StatType.STR]: 5,\r\n      [StatType.SPD]: 2,\r\n      [StatType.END]: 1,\r\n      [StatType.DEF]: -1 // Trade-off\r\n    },\r\n    roleAbilities: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['melee', 'physical', 'berserker']\r\n  },\r\n\r\n  'rogue': {\r\n    id: 'role-rogue',\r\n    name: 'Rogue',\r\n    description: 'A stealthy operative with enhanced critical hit capabilities.',\r\n    cardType: CardType.ROLE,\r\n    rarity: Rarity.UNCOMMON,\r\n    tier: 2,\r\n    statModifiers: {\r\n      [StatType.SPD]: 3,\r\n      [StatType.LCK]: 4,\r\n      [StatType.ACC]: 3,\r\n      [StatType.STR]: -1\r\n    },\r\n    roleAbilities: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['stealth', 'critical', 'mobility']\r\n  },\r\n\r\n  'warlock': {\r\n    id: 'role-warlock',\r\n    name: 'Warlock',\r\n    description: 'A dark magic user with immense power and unique abilities.',\r\n    cardType: CardType.ROLE,\r\n    rarity: Rarity.RARE,\r\n    tier: 2,\r\n    statModifiers: {\r\n      [StatType.INT]: 6,\r\n      [StatType.SPI]: 2,\r\n      [StatType.MDF]: 2,\r\n      [StatType.STR]: -2,\r\n      [StatType.DEF]: -1\r\n    },\r\n    roleAbilities: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['dark-magic', 'powerful', 'risky']\r\n  }\r\n};\r\n\r\n// ============================================================================\r\n// EQUIPMENT CARD DEFINITIONS\r\n// ============================================================================\r\n\r\nexport const EQUIPMENT_CARDS: Record<string, EquipmentCard> = {\r\n  // Weapons\r\n  'heirloom_sword': {\r\n    id: 'equip-heirloom-sword',\r\n    name: 'Heirloom Sword',\r\n    description: 'A well-crafted blade passed down through generations.',\r\n    cardType: CardType.EQUIPMENT,\r\n    rarity: Rarity.COMMON,\r\n    slot: EquipmentSlot.WEAPON,\r\n    basePower: 30,\r\n    attackRange: 1,\r\n    statBonuses: {\r\n      [StatType.STR]: 1\r\n    },\r\n    equipmentAbilities: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['sword', 'melee', 'physical']\r\n  },\r\n\r\n  'apprentice_wand': {\r\n    id: 'equip-apprentice-wand',\r\n    name: \"Apprentice's Wand\",\r\n    description: 'A basic magical focus for channeling spells.',\r\n    cardType: CardType.EQUIPMENT,\r\n    rarity: Rarity.COMMON,\r\n    slot: EquipmentSlot.WEAPON,\r\n    basePower: 30,\r\n    attackRange: 3,\r\n    statBonuses: {\r\n      [StatType.INT]: 1\r\n    },\r\n    equipmentAbilities: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['wand', 'magical', 'ranged']\r\n  },\r\n\r\n  'hunting_bow': {\r\n    id: 'equip-hunting-bow',\r\n    name: 'Hunting Bow',\r\n    description: 'A precise ranged weapon favored by scouts and hunters.',\r\n    cardType: CardType.EQUIPMENT,\r\n    rarity: Rarity.COMMON,\r\n    slot: EquipmentSlot.WEAPON,\r\n    basePower: 30,\r\n    attackRange: 5,\r\n    statBonuses: {\r\n      [StatType.ACC]: 2\r\n    },\r\n    equipmentAbilities: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['bow', 'ranged', 'physical']\r\n  }\r\n};\r\n\r\n// Export organized collections\r\nexport const CORE_DATA = {\r\n  species: SUMMON_SPECIES,\r\n  roles: ROLE_CARDS,\r\n  equipment: EQUIPMENT_CARDS\r\n} as const;\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/data/core-cards.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_86e4269f-ff10-4508-8ee9-d10459c59db4%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/data/tactical-cards.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"bf43aaf","originalToCurrentEdit":[{"txt":"/**\r\n * Action, Building, Quest, Counter, Reaction, and Advance card definitions\r\n * These are the tactical cards used during gameplay\r\n */\r\n\r\nimport {\r\n  ActionCard,\r\n  BuildingCard,\r\n  QuestCard,\r\n  CounterCard,\r\n  AdvanceCard\r\n} from '../types';\r\nimport {\r\n  CardType,\r\n  Speed,\r\n  Rarity\r\n} from '../types/core';\r\n\r\n// ============================================================================\r\n// ACTION CARDS\r\n// ============================================================================\r\n\r\nexport const ACTION_CARDS: Record<string, ActionCard> = {\r\n  'sharpened_blade': {\r\n    id: 'action-sharpened-blade',\r\n    name: 'Sharpened Blade',\r\n    description: 'Enhance a weapon\\'s cutting edge, increasing its power.',\r\n    cardType: CardType.ACTION,\r\n    rarity: Rarity.COMMON,\r\n    destinationAfterUse: 'RECHARGE',\r\n    actionEffect: {\r\n      id: 'effect-sharpen-weapon',\r\n      name: 'Sharpen Weapon',\r\n      description: 'Target Weapon equipped to a Warrior based Summon gains +10 Base Power.',\r\n      speed: Speed.ACTION,\r\n      requirements: [\r\n        {\r\n          type: 'SUMMON_ROLE',\r\n          parameters: { role: 'warrior' },\r\n          description: 'Must control a Warrior summon'\r\n        }\r\n      ],\r\n      resolution: {\r\n        type: 'STAT_MODIFIER',\r\n        parameters: { \r\n          target: 'equipped_weapon',\r\n          modifier: 'base_power',\r\n          value: 10,\r\n          duration: 'permanent'\r\n        },\r\n        targetType: 'SINGLE'\r\n      }\r\n    },\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['weapon', 'enhancement', 'warrior']\r\n  },\r\n\r\n  'healing_hands': {\r\n    id: 'action-healing-hands',\r\n    name: 'Healing Hands',\r\n    description: 'Channel restorative magic to heal an ally.',\r\n    cardType: CardType.ACTION,\r\n    rarity: Rarity.COMMON,\r\n    destinationAfterUse: 'DISCARD',\r\n    actionEffect: {\r\n      id: 'effect-magical-healing',\r\n      name: 'Magical Healing',\r\n      description: 'Restore HP to target summon. Can critical heal.',\r\n      speed: Speed.ACTION,\r\n      requirements: [\r\n        {\r\n          type: 'SUMMON_ROLE',\r\n          parameters: { role: 'magician' },\r\n          description: 'Must control a Magician summon'\r\n        }\r\n      ],\r\n      resolution: {\r\n        type: 'HEAL',\r\n        parameters: {\r\n          formula: 'caster.SPI * (1 + base_power / 100)',\r\n          base_power: 40,\r\n          can_crit: true,\r\n          crit_multiplier: 1.5,\r\n          damage_type: 'magical',\r\n          attribute: 'light'\r\n        },\r\n        targetType: 'SINGLE'\r\n      }\r\n    },\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['healing', 'magical', 'support']\r\n  },\r\n\r\n  'rush': {\r\n    id: 'action-rush',\r\n    name: 'Rush',\r\n    description: 'Grant a summon explosive speed at the cost of defense.',\r\n    cardType: CardType.ACTION,\r\n    rarity: Rarity.COMMON,\r\n    destinationAfterUse: 'RECHARGE',\r\n    actionEffect: {\r\n      id: 'effect-rush',\r\n      name: 'Rush',\r\n      description: 'Double movement speed until end of turn, halve DEF until end of opponent\\'s next turn.',\r\n      speed: Speed.ACTION,\r\n      requirements: [],\r\n      resolution: {\r\n        type: 'STAT_MODIFIER',\r\n        parameters: {\r\n          movement_multiplier: 2,\r\n          movement_duration: 'end_of_turn',\r\n          def_multiplier: 0.5,\r\n          def_duration: 'end_of_opponent_next_turn'\r\n        },\r\n        targetType: 'SINGLE'\r\n      }\r\n    },\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['movement', 'speed', 'temporary']\r\n  },\r\n\r\n  'tempest_slash': {\r\n    id: 'action-tempest-slash',\r\n    name: 'Tempest Slash',\r\n    description: 'Empower the next attack with wind magic for additional damage.',\r\n    cardType: CardType.ACTION,\r\n    rarity: Rarity.UNCOMMON,\r\n    destinationAfterUse: 'DISCARD',\r\n    actionEffect: {\r\n      id: 'effect-tempest-slash',\r\n      name: 'Tempest Slash',\r\n      description: 'Add movement and empower next basic attack with wind damage.',\r\n      speed: Speed.ACTION,\r\n      requirements: [],\r\n      resolution: {\r\n        type: 'STAT_MODIFIER',\r\n        parameters: {\r\n          movement_bonus: 1,\r\n          movement_duration: 'end_of_turn',\r\n          next_attack_bonus: {\r\n            formula: 'caster.STR * (1 + base_power / 100) * (caster.STR / target.DEF)',\r\n            base_power: 30,\r\n            damage_type: 'physical',\r\n            attribute: 'air',\r\n            can_crit: true\r\n          }\r\n        },\r\n        targetType: 'SINGLE'\r\n      }\r\n    },\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['enhancement', 'wind', 'attack']\r\n  },\r\n\r\n  'blast_bolt': {\r\n    id: 'action-blast-bolt',\r\n    name: 'Blast Bolt',\r\n    description: 'Fire a powerful magical projectile at an enemy.',\r\n    cardType: CardType.ACTION,\r\n    rarity: Rarity.COMMON,\r\n    destinationAfterUse: 'DISCARD',\r\n    actionEffect: {\r\n      id: 'effect-blast-bolt',\r\n      name: 'Blast Bolt',\r\n      description: 'Deal magical fire damage to target enemy.',\r\n      speed: Speed.ACTION,\r\n      requirements: [\r\n        {\r\n          type: 'SUMMON_ROLE',\r\n          parameters: { role: 'magician' },\r\n          description: 'Must control a Magician summon'\r\n        }\r\n      ],\r\n      resolution: {\r\n        type: 'DAMAGE',\r\n        parameters: {\r\n          formula: 'caster.INT * (1 + base_power / 100) * (caster.INT / target.MDF)',\r\n          base_power: 60,\r\n          base_accuracy: 85,\r\n          can_crit: true,\r\n          crit_multiplier: 1.5,\r\n          damage_type: 'magical',\r\n          attribute: 'fire'\r\n        },\r\n        targetType: 'SINGLE'\r\n      }\r\n    },\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['damage', 'magical', 'fire', 'ranged']\r\n  }\r\n};\r\n\r\n// ============================================================================\r\n// BUILDING CARDS\r\n// ============================================================================\r\n\r\nexport const BUILDING_CARDS: Record<string, BuildingCard> = {\r\n  'gignen_country': {\r\n    id: 'building-gignen-country',\r\n    name: 'Gignen Country',\r\n    description: 'A settlement that accelerates the growth of Gignen summons.',\r\n    cardType: CardType.BUILDING,\r\n    rarity: Rarity.UNCOMMON,\r\n    dimensions: {\r\n      width: 3,\r\n      height: 2\r\n    },\r\n    isHidden: false,\r\n    ongoingEffects: [\r\n      {\r\n        id: 'effect-gignen-growth',\r\n        name: 'Gignen Growth Acceleration',\r\n        description: 'All Gignen based Summons you control receive an additional level whenever they level up.',\r\n        speed: Speed.ACTION,\r\n        requirements: [\r\n          {\r\n            type: 'SUMMON_SPECIES',\r\n            parameters: { species: 'gignen' },\r\n            description: 'Affects Gignen summons only'\r\n          }\r\n        ],\r\n        resolution: {\r\n          type: 'LEVEL_UP',\r\n          parameters: { bonus_levels: 1 },\r\n          targetType: 'MULTIPLE'\r\n        }\r\n      }\r\n    ],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['gignen', 'leveling', 'territory']\r\n  },\r\n\r\n  'dark_altar': {\r\n    id: 'building-dark-altar',\r\n    name: 'Dark Altar',\r\n    description: 'A sinister structure that sacrifices summons for dark power.',\r\n    cardType: CardType.BUILDING,\r\n    rarity: Rarity.RARE,\r\n    dimensions: {\r\n      width: 2,\r\n      height: 2\r\n    },\r\n    isHidden: false,\r\n    ongoingEffects: [],\r\n    destructionConditions: [\r\n      {\r\n        type: 'CUSTOM',\r\n        parameters: { \r\n          trigger: 'end_of_next_turn',\r\n          effect: 'destroy_with_occupants',\r\n          reward: 'advance_magician_to_20'\r\n        },\r\n        description: 'Destroys at end of next turn along with occupying summons'\r\n      }\r\n    ],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['dark', 'sacrifice', 'powerful']\r\n  }\r\n};\r\n\r\n// ============================================================================\r\n// QUEST CARDS\r\n// ============================================================================\r\n\r\nexport const QUEST_CARDS: Record<string, QuestCard> = {\r\n  'nearwood_forest_expedition': {\r\n    id: 'quest-nearwood-expedition',\r\n    name: 'Nearwood Forest Expedition',\r\n    description: 'Lead an expedition to gain valuable experience.',\r\n    cardType: CardType.QUEST,\r\n    rarity: Rarity.COMMON,\r\n    objective: {\r\n      type: 'SUMMON_LEVEL',\r\n      parameters: { \r\n        roles: ['warrior', 'scout', 'magician'],\r\n        max_level: 9\r\n      },\r\n      description: 'Control target Warrior, Scout, or Magician based Summon whose current level is under 10'\r\n    },\r\n    reward: {\r\n      id: 'effect-expedition-experience',\r\n      name: 'Expedition Experience',\r\n      description: 'Target Summon gains 2 levels.',\r\n      speed: Speed.ACTION,\r\n      requirements: [],\r\n      resolution: {\r\n        type: 'LEVEL_UP',\r\n        parameters: { levels: 2 },\r\n        targetType: 'SINGLE'\r\n      }\r\n    },\r\n    repeatable: false,\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['experience', 'leveling', 'exploration']\r\n  }\r\n};\r\n\r\n// ============================================================================\r\n// COUNTER CARDS\r\n// ============================================================================\r\n\r\nexport const COUNTER_CARDS: Record<string, CounterCard> = {\r\n  'dramatic_return': {\r\n    id: 'counter-dramatic-return',\r\n    name: 'Dramatic Return!',\r\n    description: 'Bring back a fallen ally when all seems lost.',\r\n    cardType: CardType.COUNTER,\r\n    rarity: Rarity.UNCOMMON,\r\n    mustBeSet: true,\r\n    activationTrigger: {\r\n      event: 'ON_DEFEAT',\r\n      conditions: [\r\n        {\r\n          type: 'SUMMON_IN_PLAY',\r\n          parameters: { controller: 'self' },\r\n          description: 'Your summon is defeated'\r\n        }\r\n      ],\r\n      effect: {\r\n        id: 'effect-dramatic-return',\r\n        name: 'Dramatic Return',\r\n        description: 'Return defeated summon to play with 10% HP.',\r\n        speed: Speed.COUNTER,\r\n        requirements: [],\r\n        resolution: {\r\n          type: 'SUMMON',\r\n          parameters: {\r\n            target: 'defeated_summon',\r\n            hp_percentage: 10,\r\n            location: 'your_territory'\r\n          },\r\n          targetType: 'SINGLE'\r\n        }\r\n      }\r\n    },\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['revival', 'defensive', 'dramatic']\r\n  },\r\n\r\n  'graverobbing': {\r\n    id: 'counter-graverobbing',\r\n    name: 'Graverobbing',\r\n    description: 'Deny the enemy their victory through dark magic.',\r\n    cardType: CardType.COUNTER,\r\n    rarity: Rarity.RARE,\r\n    mustBeSet: true,\r\n    activationTrigger: {\r\n      event: 'ON_DEFEAT',\r\n      conditions: [\r\n        {\r\n          type: 'SUMMON_IN_PLAY',\r\n          parameters: { controller: 'self' },\r\n          description: 'Your summon is defeated'\r\n        }\r\n      ],\r\n      effect: {\r\n        id: 'effect-graverobbing',\r\n        name: 'Graverobbing',\r\n        description: 'Nullify Victory Point gain. Cost: Discard a card.',\r\n        speed: Speed.COUNTER,\r\n        requirements: [],\r\n        resolution: {\r\n          type: 'CUSTOM',\r\n          parameters: {\r\n            nullify_vp_gain: true,\r\n            cost: 'discard_card'\r\n          },\r\n          targetType: 'SINGLE'\r\n        }\r\n      }\r\n    },\r\n    activationCost: {\r\n      id: 'cost-discard-card',\r\n      name: 'Discard Cost',\r\n      description: 'Discard a card from your hand.',\r\n      speed: Speed.COUNTER,\r\n      requirements: [],\r\n      resolution: {\r\n        type: 'CUSTOM',\r\n        parameters: { action: 'discard_from_hand' },\r\n        targetType: 'SINGLE'\r\n      }\r\n    },\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['denial', 'dark', 'sacrifice']\r\n  }\r\n};\r\n\r\n// ============================================================================\r\n// ADVANCE CARDS\r\n// ============================================================================\r\n\r\nexport const ADVANCE_CARDS: Record<string, AdvanceCard> = {\r\n  'berserker_rage': {\r\n    id: 'advance-berserker-rage',\r\n    name: 'Berserker Rage',\r\n    description: 'Transform a warrior into a fearsome berserker.',\r\n    cardType: CardType.ADVANCE,\r\n    rarity: Rarity.UNCOMMON,\r\n    summonRequirements: [\r\n      {\r\n        type: 'SUMMON_ROLE',\r\n        parameters: { role: 'warrior' },\r\n        description: 'Target must be a Warrior'\r\n      },\r\n      {\r\n        type: 'SUMMON_LEVEL',\r\n        parameters: { min_level: 10 },\r\n        description: 'Target must be level 10 or higher'\r\n      }\r\n    ],\r\n    newRole: {\r\n      id: 'role-berserker', // Reference to berserker role\r\n      name: 'Berserker',\r\n      description: 'A fierce warrior who trades defense for overwhelming offensive power.',\r\n      cardType: CardType.ROLE,\r\n      rarity: Rarity.UNCOMMON,\r\n      tier: 2,\r\n      statModifiers: {},\r\n      roleAbilities: [],\r\n      effects: [],\r\n      triggers: [],\r\n      tags: []\r\n    },\r\n    advancementEffects: [],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['advancement', 'warrior', 'berserker']\r\n  },\r\n\r\n  'alrecht_barkstep_scoutmaster': {\r\n    id: 'advance-alrecht-barkstep',\r\n    name: 'Alrecht Barkstep, Scoutmaster',\r\n    description: 'A legendary scout who can rally allies to his position.',\r\n    cardType: CardType.ADVANCE,\r\n    rarity: Rarity.LEGENDARY,\r\n    summonRequirements: [\r\n      {\r\n        type: 'SUMMON_ROLE',\r\n        parameters: { role: 'scout' },\r\n        description: 'Target must be a Scout'\r\n      },\r\n      {\r\n        type: 'CUSTOM',\r\n        parameters: { condition: 'completed_quest' },\r\n        description: 'Target must have completed a Quest'\r\n      }\r\n    ],\r\n    newRole: {\r\n      id: 'role-rogue', // Reference to rogue role\r\n      name: 'Rogue',\r\n      description: 'A stealthy operative with enhanced capabilities.',\r\n      cardType: CardType.ROLE,\r\n      rarity: Rarity.UNCOMMON,\r\n      tier: 2,\r\n      statModifiers: {},\r\n      roleAbilities: [],\r\n      effects: [],\r\n      triggers: [],\r\n      tags: []\r\n    },\r\n    advancementEffects: [\r\n      {\r\n        id: 'effect-follow-me',\r\n        name: 'Follow Me!',\r\n        description: 'Adds \"Follow Me!\" to hand when entering play and at start of turn.',\r\n        speed: Speed.ACTION,\r\n        requirements: [],\r\n        resolution: {\r\n          type: 'CUSTOM',\r\n          parameters: { action: 'add_follow_me_to_hand' },\r\n          targetType: 'SINGLE'\r\n        }\r\n      }\r\n    ],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['named', 'legendary', 'scout', 'support']\r\n  },\r\n\r\n  'shadow_pact': {\r\n    id: 'advance-shadow-pact',\r\n    name: 'Shadow Pact',\r\n    description: 'Forge a dark contract to gain immense magical power.',\r\n    cardType: CardType.ADVANCE,\r\n    rarity: Rarity.EPIC,\r\n    summonRequirements: [\r\n      {\r\n        type: 'SUMMON_ROLE',\r\n        parameters: { role: 'magician' },\r\n        description: 'Target must be a Magician'\r\n      },\r\n      {\r\n        type: 'SUMMON_LEVEL',\r\n        parameters: { exact_level: 20 },\r\n        description: 'Target must be exactly level 20'\r\n      }\r\n    ],\r\n    newRole: {\r\n      id: 'role-warlock', // Reference to warlock role\r\n      name: 'Warlock',\r\n      description: 'A master of dark magic with immense power.',\r\n      cardType: CardType.ROLE,\r\n      rarity: Rarity.RARE,\r\n      tier: 2,\r\n      statModifiers: {},\r\n      roleAbilities: [],\r\n      effects: [],\r\n      triggers: [],\r\n      tags: []\r\n    },\r\n    advancementEffects: [\r\n      {\r\n        id: 'effect-nightmare-pain',\r\n        name: 'Nightmare Pain',\r\n        description: 'Adds \"Nightmare Pain\" counter to hand each draw phase.',\r\n        speed: Speed.ACTION,\r\n        requirements: [],\r\n        resolution: {\r\n          type: 'CUSTOM',\r\n          parameters: { action: 'add_nightmare_pain_to_hand' },\r\n          targetType: 'SINGLE'\r\n        }\r\n      }\r\n    ],\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['dark', 'powerful', 'warlock', 'pact']\r\n  }\r\n};\r\n\r\n// Export organized collections\r\nexport const TACTICAL_CARDS = {\r\n  actions: ACTION_CARDS,\r\n  buildings: BUILDING_CARDS,\r\n  quests: QUEST_CARDS,\r\n  counters: COUNTER_CARDS,\r\n  advances: ADVANCE_CARDS\r\n} as const;\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/data/tactical-cards.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_86e4269f-ff10-4508-8ee9-d10459c59db4%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/data/index.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"cb9fa40","originalToCurrentEdit":[{"txt":"/**\r\n * Main data export point combining all card definitions\r\n */\r\n\r\nexport * from './core-cards';\r\nexport * from './tactical-cards';\r\n\r\nimport { CORE_DATA } from './core-cards';\r\nimport { TACTICAL_CARDS } from './tactical-cards';\r\n\r\n// Export a unified data object\r\nexport const GAME_DATA = {\r\n  ...CORE_DATA,\r\n  ...TACTICAL_CARDS\r\n} as const;\r\n\r\n// Export quick access arrays\r\nexport const ALL_SPECIES = Object.values(CORE_DATA.species);\r\nexport const ALL_ROLES = Object.values(CORE_DATA.roles);\r\nexport const ALL_EQUIPMENT = Object.values(CORE_DATA.equipment);\r\nexport const ALL_ACTIONS = Object.values(TACTICAL_CARDS.actions);\r\nexport const ALL_BUILDINGS = Object.values(TACTICAL_CARDS.buildings);\r\nexport const ALL_QUESTS = Object.values(TACTICAL_CARDS.quests);\r\nexport const ALL_COUNTERS = Object.values(TACTICAL_CARDS.counters);\r\nexport const ALL_ADVANCES = Object.values(TACTICAL_CARDS.advances);\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/data/index.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_86e4269f-ff10-4508-8ee9-d10459c59db4%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/engine/calculations.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"ac4c5b6","originalToCurrentEdit":[{"txt":"/**\r\n * Core calculation utilities for game mechanics\r\n * Implements the formulas described in the game design document\r\n */\r\n\r\nimport {\r\n  Stats,\r\n  StatType,\r\n  GrowthRate,\r\n  GROWTH_RATE_VALUES,\r\n  StatCalculationConfig,\r\n  StatCalculationResult,\r\n  DerivedStatFormulas\r\n} from '../types';\r\n\r\n// ============================================================================\r\n// STAT CALCULATION UTILITIES\r\n// ============================================================================\r\n\r\n/**\r\n * Calculate a single stat's value at a given level\r\n * Formula: FinalStat = (BaseStat + Floor(Level × GrowthRate) × Role Modifier) + Equipment Bonus + Other Bonuses\r\n */\r\nexport function calculateStat(config: StatCalculationConfig): StatCalculationResult {\r\n  const { baseStat, growthRate, level, roleModifier, equipmentBonus, temporaryModifiers } = config;\r\n  \r\n  // Get numeric growth rate value\r\n  const growthValue = GROWTH_RATE_VALUES[growthRate];\r\n  \r\n  // Calculate growth contribution\r\n  const growthContribution = Math.floor(level * growthValue);\r\n  \r\n  // Apply role modifier to the base + growth\r\n  const roleAdjusted = (baseStat + growthContribution) * roleModifier;\r\n  \r\n  // Add equipment and temporary bonuses\r\n  const finalValue = roleAdjusted + equipmentBonus + temporaryModifiers;\r\n  \r\n  return {\r\n    finalValue: Math.floor(finalValue), // Always round down\r\n    breakdown: {\r\n      base: baseStat,\r\n      growth: growthContribution,\r\n      role: roleAdjusted - (baseStat + growthContribution),\r\n      equipment: equipmentBonus,\r\n      temporary: temporaryModifiers\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Calculate all stats for a summon at a given level\r\n */\r\nexport function calculateAllStats(\r\n  baseStats: Stats,\r\n  growthRates: Record<StatType, GrowthRate>,\r\n  level: number,\r\n  roleModifiers: Partial<Stats> = {},\r\n  equipmentBonuses: Partial<Stats> = {},\r\n  temporaryModifiers: Partial<Stats> = {}\r\n): Stats {\r\n  const result: Partial<Stats> = {};\r\n  \r\n  for (const statType of Object.values(StatType)) {\r\n    const config: StatCalculationConfig = {\r\n      baseStat: baseStats[statType],\r\n      growthRate: growthRates[statType],\r\n      level,\r\n      roleModifier: 1 + (roleModifiers[statType] || 0) / 100, // Convert to multiplier\r\n      equipmentBonus: equipmentBonuses[statType] || 0,\r\n      temporaryModifiers: temporaryModifiers[statType] || 0\r\n    };\r\n    \r\n    result[statType] = calculateStat(config).finalValue;\r\n  }\r\n  \r\n  return result as Stats;\r\n}\r\n\r\n// ============================================================================\r\n// DERIVED STAT FORMULAS\r\n// ============================================================================\r\n\r\n/**\r\n * Implemented derived stat formulas from the game design\r\n */\r\nexport const DERIVED_STATS: DerivedStatFormulas = {\r\n  /**\r\n   * Max HP = 50 + Floor(END ^ 1.5)\r\n   */\r\n  maxHp: (endurance: number): number => {\r\n    return 50 + Math.floor(Math.pow(endurance, 1.5));\r\n  },\r\n\r\n  /**\r\n   * Movement Speed = 2 + Floor((SPD - 10) / 5)\r\n   */\r\n  movementSpeed: (speed: number): number => {\r\n    return 2 + Math.floor((speed - 10) / 5);\r\n  },\r\n\r\n  /**\r\n   * Basic Attack To Hit = 90 + (ACC / 10)\r\n   */\r\n  basicAttackToHit: (accuracy: number): number => {\r\n    return 90 + (accuracy / 10);\r\n  },\r\n\r\n  /**\r\n   * Critical Hit Chance = Floor((LCK × 0.3375) + 1.65)\r\n   */\r\n  criticalHitChance: (luck: number): number => {\r\n    return Math.floor((luck * 0.3375) + 1.65);\r\n  }\r\n};\r\n\r\n// ============================================================================\r\n// DAMAGE CALCULATION UTILITIES\r\n// ============================================================================\r\n\r\n/**\r\n * Standard basic attack damage formula\r\n * STR × (1 + Weapon Power / 100) × (STR / Target DEF) × IF_CRIT\r\n */\r\nexport function calculateBasicAttackDamage(\r\n  attackerStrength: number,\r\n  weaponPower: number,\r\n  targetDefense: number,\r\n  isCritical: boolean = false,\r\n  critMultiplier: number = 1.5\r\n): number {\r\n  const baseDamage = attackerStrength * (1 + weaponPower / 100) * (attackerStrength / targetDefense);\r\n  const critAdjusted = isCritical ? baseDamage * critMultiplier : baseDamage;\r\n  return Math.floor(critAdjusted);\r\n}\r\n\r\n/**\r\n * Enhanced basic attack damage for ranged weapons (bow formula)\r\n * ((STR + ACC) / 2) × (1 + Weapon Power / 100) × (STR / Target DEF) × IF_CRIT\r\n */\r\nexport function calculateRangedAttackDamage(\r\n  attackerStrength: number,\r\n  attackerAccuracy: number,\r\n  weaponPower: number,\r\n  targetDefense: number,\r\n  isCritical: boolean = false,\r\n  critMultiplier: number = 1.5\r\n): number {\r\n  const baseDamage = ((attackerStrength + attackerAccuracy) / 2) * \r\n                     (1 + weaponPower / 100) * \r\n                     (attackerStrength / targetDefense);\r\n  const critAdjusted = isCritical ? baseDamage * critMultiplier : baseDamage;\r\n  return Math.floor(critAdjusted);\r\n}\r\n\r\n/**\r\n * Magical attack damage formula\r\n * INT × (1 + Weapon Power / 100) × (INT / Target MDF) × IF_CRIT\r\n */\r\nexport function calculateMagicalAttackDamage(\r\n  attackerIntelligence: number,\r\n  weaponPower: number,\r\n  targetMagicDefense: number,\r\n  isCritical: boolean = false,\r\n  critMultiplier: number = 1.5\r\n): number {\r\n  const baseDamage = attackerIntelligence * \r\n                     (1 + weaponPower / 100) * \r\n                     (attackerIntelligence / targetMagicDefense);\r\n  const critAdjusted = isCritical ? baseDamage * critMultiplier : baseDamage;\r\n  return Math.floor(critAdjusted);\r\n}\r\n\r\n/**\r\n * Standard healing formula\r\n * SPI × (1 + base_power / 100)\r\n */\r\nexport function calculateHealing(\r\n  healerSpirit: number,\r\n  basePower: number,\r\n  isCritical: boolean = false,\r\n  critMultiplier: number = 1.5\r\n): number {\r\n  const baseHealing = healerSpirit * (1 + basePower / 100);\r\n  const critAdjusted = isCritical ? baseHealing * critMultiplier : baseHealing;\r\n  return Math.floor(critAdjusted);\r\n}\r\n\r\n// ============================================================================\r\n// PROBABILITY UTILITIES\r\n// ============================================================================\r\n\r\n/**\r\n * Generate a random number between min and max (inclusive)\r\n */\r\nexport function randomBetween(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * Roll a percentage chance (0-100)\r\n * Returns true if the roll succeeds\r\n */\r\nexport function rollPercentage(chance: number): boolean {\r\n  return Math.random() * 100 <= chance;\r\n}\r\n\r\n/**\r\n * Roll for critical hit\r\n */\r\nexport function rollCritical(luckStat: number): boolean {\r\n  const critChance = DERIVED_STATS.criticalHitChance(luckStat);\r\n  return rollPercentage(critChance);\r\n}\r\n\r\n/**\r\n * Roll for hit chance\r\n */\r\nexport function rollHit(accuracyStat: number, baseAccuracy: number = 90): boolean {\r\n  const totalChance = Math.min(100, baseAccuracy + (accuracyStat / 10));\r\n  return rollPercentage(totalChance);\r\n}\r\n\r\n// ============================================================================\r\n// VALIDATION UTILITIES\r\n// ============================================================================\r\n\r\n/**\r\n * Validate that a level is within acceptable range (5-20)\r\n */\r\nexport function isValidLevel(level: number): boolean {\r\n  return level >= 5 && level <= 20 && Number.isInteger(level);\r\n}\r\n\r\n/**\r\n * Validate that coordinates are within board bounds (0-11 x, 0-13 y)\r\n */\r\nexport function isValidCoordinate(x: number, y: number): boolean {\r\n  return x >= 0 && x < 12 && y >= 0 && y < 14;\r\n}\r\n\r\n/**\r\n * Calculate distance between two coordinates\r\n */\r\nexport function calculateDistance(x1: number, y1: number, x2: number, y2: number): number {\r\n  return Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1)); // Chess distance\r\n}\r\n\r\n/**\r\n * Check if a coordinate is within range of another\r\n */\r\nexport function isWithinRange(\r\n  sourceX: number, \r\n  sourceY: number, \r\n  targetX: number, \r\n  targetY: number, \r\n  range: number\r\n): boolean {\r\n  return calculateDistance(sourceX, sourceY, targetX, targetY) <= range;\r\n}\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/engine/calculations.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_86e4269f-ff10-4508-8ee9-d10459c59db4%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/engine/index.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"9b985e6","originalToCurrentEdit":[{"txt":"/**\r\n * Game engine exports\r\n */\r\n\r\nexport * from './calculations';\r\n\r\n// Re-export for convenience\r\nexport {\r\n  calculateStat,\r\n  calculateAllStats,\r\n  DERIVED_STATS,\r\n  calculateBasicAttackDamage,\r\n  calculateRangedAttackDamage,\r\n  calculateMagicalAttackDamage,\r\n  calculateHealing,\r\n  rollCritical,\r\n  rollHit,\r\n  rollPercentage,\r\n  isValidLevel,\r\n  isValidCoordinate,\r\n  calculateDistance,\r\n  isWithinRange\r\n} from './calculations';\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/engine/index.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_86e4269f-ff10-4508-8ee9-d10459c59db4%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/demo.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"4807deb","originalToCurrentEdit":[{"txt":"/**\r\n * Demo showcasing the type system and calculations\r\n * This recreates parts of the game example from the design document\r\n */\r\n\r\nimport {\r\n  StatType,\r\n  GrowthRate,\r\n  SummonCard,\r\n  SummonUnit,\r\n  CardType,\r\n  Rarity\r\n} from './types';\r\nimport {\r\n  calculateAllStats,\r\n  DERIVED_STATS,\r\n  calculateBasicAttackDamage\r\n} from './engine';\r\nimport { GAME_DATA } from './data';\r\n\r\n// ============================================================================\r\n// DEMO: CREATING SUMMON CARDS\r\n// ============================================================================\r\n\r\n/**\r\n * Create a Gignen Warrior summon card like from the game example\r\n */\r\nexport function createGignenWarriorDemo(): SummonCard {\r\n  const gignenSpecies = GAME_DATA.species.gignen;\r\n  \r\n  return {\r\n    id: 'demo-gignen-warrior-001',\r\n    name: 'Gignen Warrior',\r\n    description: 'A sturdy Gignen fighter with balanced growth potential.',\r\n    cardType: CardType.SUMMON,\r\n    rarity: Rarity.COMMON,\r\n    speciesId: gignenSpecies.id,\r\n    baseStats: gignenSpecies.baseStats,\r\n    // Example growth rates from the game story\r\n    growthRates: {\r\n      [StatType.STR]: GrowthRate.GRADUAL,    // 1.33\r\n      [StatType.END]: GrowthRate.NORMAL,     // 1.0\r\n      [StatType.DEF]: GrowthRate.NORMAL,     // 1.0  \r\n      [StatType.INT]: GrowthRate.STEADY,     // 0.66\r\n      [StatType.SPI]: GrowthRate.NORMAL,     // 1.0\r\n      [StatType.MDF]: GrowthRate.STEADY,     // 0.66\r\n      [StatType.SPD]: GrowthRate.MINIMAL,    // 0.5\r\n      [StatType.ACC]: GrowthRate.STEADY,     // 0.66\r\n      [StatType.LCK]: GrowthRate.EXCEPTIONAL // 2.0\r\n    },\r\n    generatedAt: new Date(),\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['gignen', 'warrior', 'balanced']\r\n  };\r\n}\r\n\r\n/**\r\n * Create a summon unit from a summon card at a specific level\r\n */\r\nexport function createSummonUnit(\r\n  summonCard: SummonCard, \r\n  level: number,\r\n  playerId: string,\r\n  position: { x: number, y: number }\r\n): SummonUnit {\r\n  const warriorRole = GAME_DATA.roles.warrior;\r\n  const heirloomSword = GAME_DATA.equipment.heirloom_sword;\r\n  \r\n  // Calculate current stats at this level\r\n  const currentStats = calculateAllStats(\r\n    summonCard.baseStats,\r\n    summonCard.growthRates,\r\n    level,\r\n    warriorRole.statModifiers,\r\n    heirloomSword.statBonuses\r\n  );\r\n  \r\n  // Calculate derived stats\r\n  const maxHp = DERIVED_STATS.maxHp(currentStats[StatType.END]);\r\n  const movementSpeed = DERIVED_STATS.movementSpeed(currentStats[StatType.SPD]);\r\n  \r\n  return {\r\n    id: `unit-${summonCard.id}-${Date.now()}`,\r\n    name: `${summonCard.name} (Level ${level})`,\r\n    originalCardId: summonCard.id,\r\n    playerId,\r\n    position,\r\n    level,\r\n    currentHp: maxHp, // Start at full HP\r\n    maxHp,\r\n    currentStats,\r\n    baseStats: summonCard.baseStats,\r\n    growthRates: summonCard.growthRates,\r\n    currentRole: warriorRole.id,\r\n    equipment: {\r\n      weapon: heirloomSword.id\r\n    },\r\n    statusEffects: [],\r\n    movementUsed: 0,\r\n    hasAttacked: false,\r\n    temporaryModifiers: []\r\n  };\r\n}\r\n\r\n// ============================================================================\r\n// DEMO: COMBAT CALCULATION\r\n// ============================================================================\r\n\r\n/**\r\n * Simulate the Tempest Slash attack from Turn 5 of the game example\r\n */\r\nexport function simulateTempestSlashAttack(): void {\r\n  console.log('=== Tempest Slash Attack Simulation ===');\r\n  \r\n  // Create the attacking Gignen Berserker (level 12 in the example)\r\n  const gignenCard = createGignenWarriorDemo();\r\n  const berserker = createSummonUnit(gignenCard, 12, 'player-a', { x: 4, y: 11 });\r\n  \r\n  // The berserker role has different stat modifiers\r\n  const berserkerRole = GAME_DATA.roles.berserker;\r\n  berserker.currentStats = calculateAllStats(\r\n    gignenCard.baseStats,\r\n    gignenCard.growthRates,\r\n    12,\r\n    berserkerRole.statModifiers,\r\n    { [StatType.STR]: 1 } // Heirloom sword bonus\r\n  );\r\n  \r\n  console.log('Attacker Stats:', {\r\n    STR: berserker.currentStats[StatType.STR],\r\n    ACC: berserker.currentStats[StatType.ACC],\r\n    LCK: berserker.currentStats[StatType.LCK]\r\n  });\r\n  \r\n  // Create the target Fae Magician (level 6 in the example)\r\n  const faeSpecies = GAME_DATA.species.fae;\r\n  const magicianRole = GAME_DATA.roles.magician;\r\n  \r\n  const targetStats = calculateAllStats(\r\n    faeSpecies.baseStats,\r\n    {\r\n      [StatType.STR]: GrowthRate.NORMAL,\r\n      [StatType.END]: GrowthRate.NORMAL,\r\n      [StatType.DEF]: GrowthRate.NORMAL,\r\n      [StatType.INT]: GrowthRate.GRADUAL,\r\n      [StatType.SPI]: GrowthRate.GRADUAL,\r\n      [StatType.MDF]: GrowthRate.NORMAL,\r\n      [StatType.SPD]: GrowthRate.NORMAL,\r\n      [StatType.ACC]: GrowthRate.GRADUAL,\r\n      [StatType.LCK]: GrowthRate.NORMAL\r\n    },\r\n    6,\r\n    magicianRole.statModifiers\r\n  );\r\n  \r\n  console.log('Target Stats:', {\r\n    DEF: targetStats[StatType.DEF],\r\n    MDF: targetStats[StatType.MDF]\r\n  });\r\n  \r\n  // Simulate the attack sequence from the example\r\n  const attackerSTR = berserker.currentStats[StatType.STR]; // Should be 44\r\n  const attackerACC = berserker.currentStats[StatType.ACC];\r\n  const targetDEF = targetStats[StatType.DEF]; // Should be 16\r\n  const weaponPower = 40; // Enhanced heirloom sword (30 + 10 from Sharpened Blade)\r\n  \r\n  // Check if attack hits\r\n  const hitChance = 90 + (attackerACC / 10);\r\n  console.log(`Hit chance: ${hitChance.toFixed(1)}%`);\r\n  \r\n  // Check for critical\r\n  const critChance = DERIVED_STATS.criticalHitChance(berserker.currentStats[StatType.LCK]);\r\n  console.log(`Crit chance: ${critChance}%`);\r\n  \r\n  // Calculate weapon damage\r\n  const weaponDamage = calculateBasicAttackDamage(\r\n    attackerSTR,\r\n    weaponPower,\r\n    targetDEF,\r\n    false // Not crit in the example\r\n  );\r\n  \r\n  // Calculate Tempest Slash additional damage\r\n  const tempestDamage = Math.floor(\r\n    attackerSTR * (1 + 30 / 100) * (attackerSTR / targetDEF)\r\n  );\r\n  \r\n  const totalDamage = weaponDamage + tempestDamage;\r\n  \r\n  console.log('Damage Breakdown:');\r\n  console.log(`- Weapon damage: ${weaponDamage}`);\r\n  console.log(`- Tempest Slash: ${tempestDamage}`);\r\n  console.log(`- Total damage: ${totalDamage}`);\r\n  console.log('Expected from example: 326 (169 + 157)');\r\n}\r\n\r\n// ============================================================================\r\n// DEMO: STAT PROGRESSION\r\n// ============================================================================\r\n\r\n/**\r\n * Show how a summon's stats progress from level 5 to 20\r\n */\r\nexport function demonstrateStatProgression(): void {\r\n  console.log('\\n=== Stat Progression Demo ===');\r\n  \r\n  const gignenCard = createGignenWarriorDemo();\r\n  const warriorRole = GAME_DATA.roles.warrior;\r\n  \r\n  console.log('Gignen Warrior stat progression (with Warrior role):');\r\n  console.log('Level | STR | END | DEF | HP  | MV');\r\n  console.log('------|-----|-----|-----|-----|---');\r\n  \r\n  for (let level = 5; level <= 20; level += 5) {\r\n    const stats = calculateAllStats(\r\n      gignenCard.baseStats,\r\n      gignenCard.growthRates,\r\n      level,\r\n      warriorRole.statModifiers\r\n    );\r\n    \r\n    const hp = DERIVED_STATS.maxHp(stats[StatType.END]);\r\n    const mv = DERIVED_STATS.movementSpeed(stats[StatType.SPD]);\r\n    \r\n    console.log(\r\n      `${level.toString().padStart(5)} | ` +\r\n      `${stats[StatType.STR].toString().padStart(3)} | ` +\r\n      `${stats[StatType.END].toString().padStart(3)} | ` +\r\n      `${stats[StatType.DEF].toString().padStart(3)} | ` +\r\n      `${hp.toString().padStart(3)} | ` +\r\n      `${mv.toString().padStart(2)}`\r\n    );\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// DEMO RUNNER\r\n// ============================================================================\r\n\r\n/**\r\n * Run all demos\r\n */\r\nexport function runAllDemos(): void {\r\n  console.log('🎮 Card Game Demo System');\r\n  console.log('========================\\n');\r\n  \r\n  demonstrateStatProgression();\r\n  simulateTempestSlashAttack();\r\n  \r\n  console.log('\\n✅ All demos completed!');\r\n}\r\n\r\n// Export for external use\r\nexport { runAllDemos as default };\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/demo.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_86e4269f-ff10-4508-8ee9-d10459c59db4%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}}]},{"stopId":"0cb0916d-b73a-4f04-9f0b-7155ded6a158","entries":[{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/demo.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"4807deb","originalToCurrentEdit":[{"txt":"/**\r\n * Demo showcasing the type system and calculations\r\n * This recreates parts of the game example from the design document\r\n */\r\n\r\nimport {\r\n  StatType,\r\n  GrowthRate,\r\n  SummonCard,\r\n  SummonUnit,\r\n  CardType,\r\n  Rarity\r\n} from './types';\r\nimport {\r\n  calculateAllStats,\r\n  DERIVED_STATS,\r\n  calculateBasicAttackDamage\r\n} from './engine';\r\nimport { GAME_DATA } from './data';\r\n\r\n// ============================================================================\r\n// DEMO: CREATING SUMMON CARDS\r\n// ============================================================================\r\n\r\n/**\r\n * Create a Gignen Warrior summon card like from the game example\r\n */\r\nexport function createGignenWarriorDemo(): SummonCard {\r\n  const gignenSpecies = GAME_DATA.species.gignen;\r\n  \r\n  return {\r\n    id: 'demo-gignen-warrior-001',\r\n    name: 'Gignen Warrior',\r\n    description: 'A sturdy Gignen fighter with balanced growth potential.',\r\n    cardType: CardType.SUMMON,\r\n    rarity: Rarity.COMMON,\r\n    speciesId: gignenSpecies.id,\r\n    baseStats: gignenSpecies.baseStats,\r\n    // Example growth rates from the game story\r\n    growthRates: {\r\n      [StatType.STR]: GrowthRate.GRADUAL,    // 1.33\r\n      [StatType.END]: GrowthRate.NORMAL,     // 1.0\r\n      [StatType.DEF]: GrowthRate.NORMAL,     // 1.0  \r\n      [StatType.INT]: GrowthRate.STEADY,     // 0.66\r\n      [StatType.SPI]: GrowthRate.NORMAL,     // 1.0\r\n      [StatType.MDF]: GrowthRate.STEADY,     // 0.66\r\n      [StatType.SPD]: GrowthRate.MINIMAL,    // 0.5\r\n      [StatType.ACC]: GrowthRate.STEADY,     // 0.66\r\n      [StatType.LCK]: GrowthRate.EXCEPTIONAL // 2.0\r\n    },\r\n    generatedAt: new Date(),\r\n    effects: [],\r\n    triggers: [],\r\n    tags: ['gignen', 'warrior', 'balanced']\r\n  };\r\n}\r\n\r\n/**\r\n * Create a summon unit from a summon card at a specific level\r\n */\r\nexport function createSummonUnit(\r\n  summonCard: SummonCard, \r\n  level: number,\r\n  playerId: string,\r\n  position: { x: number, y: number }\r\n): SummonUnit {\r\n  const warriorRole = GAME_DATA.roles.warrior;\r\n  const heirloomSword = GAME_DATA.equipment.heirloom_sword;\r\n  \r\n  // Calculate current stats at this level\r\n  const currentStats = calculateAllStats(\r\n    summonCard.baseStats,\r\n    summonCard.growthRates,\r\n    level,\r\n    warriorRole.statModifiers,\r\n    heirloomSword.statBonuses\r\n  );\r\n  \r\n  // Calculate derived stats\r\n  const maxHp = DERIVED_STATS.maxHp(currentStats[StatType.END]);\r\n  const movementSpeed = DERIVED_STATS.movementSpeed(currentStats[StatType.SPD]);\r\n  \r\n  return {\r\n    id: `unit-${summonCard.id}-${Date.now()}`,\r\n    name: `${summonCard.name} (Level ${level})`,\r\n    originalCardId: summonCard.id,\r\n    playerId,\r\n    position,\r\n    level,\r\n    currentHp: maxHp, // Start at full HP\r\n    maxHp,\r\n    currentStats,\r\n    baseStats: summonCard.baseStats,\r\n    growthRates: summonCard.growthRates,\r\n    currentRole: warriorRole.id,\r\n    equipment: {\r\n      weapon: heirloomSword.id\r\n    },\r\n    statusEffects: [],\r\n    movementUsed: 0,\r\n    hasAttacked: false,\r\n    temporaryModifiers: []\r\n  };\r\n}\r\n\r\n// ============================================================================\r\n// DEMO: COMBAT CALCULATION\r\n// ============================================================================\r\n\r\n/**\r\n * Simulate the Tempest Slash attack from Turn 5 of the game example\r\n */\r\nexport function simulateTempestSlashAttack(): void {\r\n  console.log('=== Tempest Slash Attack Simulation ===');\r\n  \r\n  // Create the attacking Gignen Berserker (level 12 in the example)\r\n  const gignenCard = createGignenWarriorDemo();\r\n  const berserker = createSummonUnit(gignenCard, 12, 'player-a', { x: 4, y: 11 });\r\n  \r\n  // The berserker role has different stat modifiers\r\n  const berserkerRole = GAME_DATA.roles.berserker;\r\n  berserker.currentStats = calculateAllStats(\r\n    gignenCard.baseStats,\r\n    gignenCard.growthRates,\r\n    12,\r\n    berserkerRole.statModifiers,\r\n    { [StatType.STR]: 1 } // Heirloom sword bonus\r\n  );\r\n  \r\n  console.log('Attacker Stats:', {\r\n    STR: berserker.currentStats[StatType.STR],\r\n    ACC: berserker.currentStats[StatType.ACC],\r\n    LCK: berserker.currentStats[StatType.LCK]\r\n  });\r\n  \r\n  // Create the target Fae Magician (level 6 in the example)\r\n  const faeSpecies = GAME_DATA.species.fae;\r\n  const magicianRole = GAME_DATA.roles.magician;\r\n  \r\n  const targetStats = calculateAllStats(\r\n    faeSpecies.baseStats,\r\n    {\r\n      [StatType.STR]: GrowthRate.NORMAL,\r\n      [StatType.END]: GrowthRate.NORMAL,\r\n      [StatType.DEF]: GrowthRate.NORMAL,\r\n      [StatType.INT]: GrowthRate.GRADUAL,\r\n      [StatType.SPI]: GrowthRate.GRADUAL,\r\n      [StatType.MDF]: GrowthRate.NORMAL,\r\n      [StatType.SPD]: GrowthRate.NORMAL,\r\n      [StatType.ACC]: GrowthRate.GRADUAL,\r\n      [StatType.LCK]: GrowthRate.NORMAL\r\n    },\r\n    6,\r\n    magicianRole.statModifiers\r\n  );\r\n  \r\n  console.log('Target Stats:', {\r\n    DEF: targetStats[StatType.DEF],\r\n    MDF: targetStats[StatType.MDF]\r\n  });\r\n  \r\n  // Simulate the attack sequence from the example\r\n  const attackerSTR = berserker.currentStats[StatType.STR]; // Should be 44\r\n  const attackerACC = berserker.currentStats[StatType.ACC];\r\n  const targetDEF = targetStats[StatType.DEF]; // Should be 16\r\n  const weaponPower = 40; // Enhanced heirloom sword (30 + 10 from Sharpened Blade)\r\n  \r\n  // Check if attack hits\r\n  const hitChance = 90 + (attackerACC / 10);\r\n  console.log(`Hit chance: ${hitChance.toFixed(1)}%`);\r\n  \r\n  // Check for critical\r\n  const critChance = DERIVED_STATS.criticalHitChance(berserker.currentStats[StatType.LCK]);\r\n  console.log(`Crit chance: ${critChance}%`);\r\n  \r\n  // Calculate weapon damage\r\n  const weaponDamage = calculateBasicAttackDamage(\r\n    attackerSTR,\r\n    weaponPower,\r\n    targetDEF,\r\n    false // Not crit in the example\r\n  );\r\n  \r\n  // Calculate Tempest Slash additional damage\r\n  const tempestDamage = Math.floor(\r\n    attackerSTR * (1 + 30 / 100) * (attackerSTR / targetDEF)\r\n  );\r\n  \r\n  const totalDamage = weaponDamage + tempestDamage;\r\n  \r\n  console.log('Damage Breakdown:');\r\n  console.log(`- Weapon damage: ${weaponDamage}`);\r\n  console.log(`- Tempest Slash: ${tempestDamage}`);\r\n  console.log(`- Total damage: ${totalDamage}`);\r\n  console.log('Expected from example: 326 (169 + 157)');\r\n}\r\n\r\n// ============================================================================\r\n// DEMO: STAT PROGRESSION\r\n// ============================================================================\r\n\r\n/**\r\n * Show how a summon's stats progress from level 5 to 20\r\n */\r\nexport function demonstrateStatProgression(): void {\r\n  console.log('\\n=== Stat Progression Demo ===');\r\n  \r\n  const gignenCard = createGignenWarriorDemo();\r\n  const warriorRole = GAME_DATA.roles.warrior;\r\n  \r\n  console.log('Gignen Warrior stat progression (with Warrior role):');\r\n  console.log('Level | STR | END | DEF | HP  | MV');\r\n  console.log('------|-----|-----|-----|-----|---');\r\n  \r\n  for (let level = 5; level <= 20; level += 5) {\r\n    const stats = calculateAllStats(\r\n      gignenCard.baseStats,\r\n      gignenCard.growthRates,\r\n      level,\r\n      warriorRole.statModifiers\r\n    );\r\n    \r\n    const hp = DERIVED_STATS.maxHp(stats[StatType.END]);\r\n    const mv = DERIVED_STATS.movementSpeed(stats[StatType.SPD]);\r\n    \r\n    console.log(\r\n      `${level.toString().padStart(5)} | ` +\r\n      `${stats[StatType.STR].toString().padStart(3)} | ` +\r\n      `${stats[StatType.END].toString().padStart(3)} | ` +\r\n      `${stats[StatType.DEF].toString().padStart(3)} | ` +\r\n      `${hp.toString().padStart(3)} | ` +\r\n      `${mv.toString().padStart(2)}`\r\n    );\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// DEMO RUNNER\r\n// ============================================================================\r\n\r\n/**\r\n * Run all demos\r\n */\r\nexport function runAllDemos(): void {\r\n  console.log('🎮 Card Game Demo System');\r\n  console.log('========================\\n');\r\n  \r\n  demonstrateStatProgression();\r\n  simulateTempestSlashAttack();\r\n  \r\n  console.log('\\n✅ All demos completed!');\r\n}\r\n\r\n// Export for external use\r\nexport { runAllDemos as default };\r\n","pos":0,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/demo.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_86e4269f-ff10-4508-8ee9-d10459c59db4%22%2C%22undoStop%22%3A%220cb0916d-b73a-4f04-9f0b-7155ded6a158%22%7D","telemetryInfo":{"requestId":"request_86e4269f-ff10-4508-8ee9-d10459c59db4","agentId":"github.copilot.editsAgent"}}]},{"stopId":"fcda087b-71be-406f-b9c0-d51f80950079","entries":[{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/App.tsx","languageId":"typescriptreact","originalHash":"549589d","currentHash":"549589d","originalToCurrentEdit":[],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/App.tsx?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_86e4269f-ff10-4508-8ee9-d10459c59db4%22%2C%22undoStop%22%3A%22fcda087b-71be-406f-b9c0-d51f80950079%22%7D","telemetryInfo":{"requestId":"request_86e4269f-ff10-4508-8ee9-d10459c59db4","agentId":"github.copilot.editsAgent"}}]}],"postEdit":[{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/App.tsx","languageId":"typescriptreact","originalHash":"549589d","currentHash":"e7d9ed4","originalToCurrentEdit":[{"txt":", useEffect","pos":25,"len":0},{"txt":"import { runAllDemos } from './demo';\r\n","pos":155,"len":0},{"txt":"\r\n    // Run the demo system on component mount\r\n    useEffect(() => {\r\n        console.log('🎮 Card Game Demo - Running Type System Examples');\r\n        runAllDemos();\r\n    }, []);\r\n","pos":512,"len":0}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/App.tsx?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22request_86e4269f-ff10-4508-8ee9-d10459c59db4%22%2C%22undoStop%22%3A%22d19944f6-f46c-4e17-911b-79a8e843c7c0%22%7D","telemetryInfo":{"requestId":"request_86e4269f-ff10-4508-8ee9-d10459c59db4","agentId":"github.copilot.editsAgent"}}]}],"linearHistoryIndex":12,"initialFileContents":[["file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/core.ts","da39a3e"],["file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/cards.ts","da39a3e"],["file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/game-state.ts","da39a3e"],["file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/calculations.ts","da39a3e"],["file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/index.ts","da39a3e"],["file:///c%3A/Users/cskib/Projects/CardGameDemo/src/data/core-cards.ts","da39a3e"],["file:///c%3A/Users/cskib/Projects/CardGameDemo/src/data/tactical-cards.ts","da39a3e"],["file:///c%3A/Users/cskib/Projects/CardGameDemo/src/data/index.ts","da39a3e"],["file:///c%3A/Users/cskib/Projects/CardGameDemo/src/engine/calculations.ts","da39a3e"],["file:///c%3A/Users/cskib/Projects/CardGameDemo/src/engine/index.ts","da39a3e"],["file:///c%3A/Users/cskib/Projects/CardGameDemo/src/demo.ts","da39a3e"],["file:///c%3A/Users/cskib/Projects/CardGameDemo/src/App.tsx","549589d"]],"recentSnapshot":{"entries":[{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/core.ts","languageId":"typescript","originalHash":"5a656f8","currentHash":"da39a3e","originalToCurrentEdit":[],"state":2,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/types/core.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/cards.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":2,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/types/cards.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/game-state.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":2,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/types/game-state.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/calculations.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":2,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/types/calculations.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/types/index.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":2,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/types/index.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/data/core-cards.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":2,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/data/core-cards.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/data/tactical-cards.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":2,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/data/tactical-cards.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/data/index.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":2,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/data/index.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/engine/calculations.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":2,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/engine/calculations.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/engine/index.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":2,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/engine/index.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_35f83959-94ef-4e76-a836-238b5d6a82a3","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/demo.ts","languageId":"typescript","originalHash":"da39a3e","currentHash":"da39a3e","originalToCurrentEdit":[],"state":2,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/demo.ts?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_86e4269f-ff10-4508-8ee9-d10459c59db4","agentId":"github.copilot.editsAgent"}},{"resource":"file:///c%3A/Users/cskib/Projects/CardGameDemo/src/App.tsx","languageId":"typescriptreact","originalHash":"549589d","currentHash":"549589d","originalToCurrentEdit":[],"state":2,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/cskib/Projects/CardGameDemo/src/App.tsx?%7B%22sessionId%22%3A%22464cd3d5-1963-430b-9541-a779d947d5fd%22%2C%22requestId%22%3A%22%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_86e4269f-ff10-4508-8ee9-d10459c59db4","agentId":"github.copilot.editsAgent"}}]}}