// === Unique identifier types ===
export type CardId = string;
export type SummonInstanceId = string;

// === Card Types Enum ===
export type CardType =
  | "summon"
  | "action"
  | "reaction"
  | "counter"
  | "building"
  | "quest"
  | "advance"
  | "role"
  | "equipment";

// === Stat and Growth Rate Blocks ===
export interface StatBlock {
  STR: number;
  END: number;
  DEF: number;
  INT: number;
  SPI: number;
  MDF: number;
  SPD: number;
  ACC: number;
  LCK: number;
}

export interface GrowthRateBlock {
  STR: number;
  END: number;
  DEF: number;
  INT: number;
  SPI: number;
  MDF: number;
  SPD: number;
  ACC: number;
  LCK: number;
}

// === Rarity Types ===
export type Rarity = "common" | "uncommon" | "rare" | "legend" | "myth";

// === Stat Range for SummonTemplate ===
export interface StatRange {
  min: number;
  max: number;
}

// === Summon Template (Species definition, no rarity logic) ===
export interface SummonTemplate {
  id: string;
  name: string;
  description: string;
  species: string;
  card_type: "summon_template";
  attribute: string;
  base_stats: {
    STR: StatRange;
    END: StatRange;
    DEF: StatRange;
    INT: StatRange;
    SPI: StatRange;
    MDF: StatRange;
    SPD: StatRange;
    LCK: StatRange;
    ACC: StatRange;
  };
  // Optionally: possible_roles?: string[];
}

// === Growth Rate Probability Table (for Summon generation) ===
export type GrowthRateType = "Exceptional" | "Accelerated" | "Gradual" | "Normal" | "Steady" | "Minimal";

export type GrowthRateProbabilityTable = {
  [rarity in Rarity]: {
    [growthRate in GrowthRateType]: number;
  };
};

// Example usage:
// const growthRateProbabilities: GrowthRateProbabilityTable = { ... };

// === Rarity Growth Rate Table (optional, for mapping rarity to growth values) ===
export interface RarityGrowthRates {
  [rarity: string]: GrowthRateBlock;
}

// === Role/Equipment Data (flattened for SummonCard) ===
export interface RoleData {
  id: CardId;
  name: string;
  statModifiers: Partial<StatBlock>;
  // ...other role fields
}

export interface EquipmentData {
  id: CardId;
  name: string;
  slot: "weapon" | "offhand" | "armor" | "accessory";
  bonuses: Partial<StatBlock>;
  // ...other equipment fields
}

// === Base Card Interface ===
export interface CardBase {
  id: CardId;
  name: string;
  type: CardType;
  description: string;
  requirements?: Requirement[];
  triggers?: Trigger[];
  effects?: Effect[];
  // ...other shared fields (art, rarity, etc.)
}

// === SummonSlot (Deckbuilding only, not a Card) ===
export interface SummonSlot {
  summonId: CardId; // references a Summon template card
  roleId: CardId;   // references a Role card
  equipment: CardId[]; // up to 4, references Equipment cards
}

// === SummonCard (Playable, unique per game) ===
export interface SummonCard extends CardBase {
  type: "summon";
  summonInstanceId: SummonInstanceId; // unique per game
  baseStats: StatBlock;
  growthRates: GrowthRateBlock;
  species: string;
  rarity: string;
  role: RoleData;
  equipment: EquipmentData[];
  // ...other Summon-specific fields
}

// === Other Card Types (Atomic, not composite) ===
export interface ActionCard extends CardBase {
  type: "action";
  // ...action-specific fields
}
export interface ReactionCard extends CardBase {
  type: "reaction";
  // ...reaction-specific fields
}
export interface CounterCard extends CardBase {
  type: "counter";
  // ...counter-specific fields
}
export interface BuildingCard extends CardBase {
  type: "building";
  // ...building-specific fields
}
export interface QuestCard extends CardBase {
  type: "quest";
  // ...quest-specific fields
}
export interface AdvanceCard extends CardBase {
  type: "advance";
  // ...advance-specific fields
}

// === Role and Equipment (for deckbuilding, not playable) ===
export interface RoleCard extends CardBase {
  type: "role";
  statModifiers: Partial<StatBlock>;
  // ...role-specific fields
}
export interface EquipmentCard extends CardBase {
  type: "equipment";
  slot: "weapon" | "offhand" | "armor" | "accessory";
  bonuses: Partial<StatBlock>;
  // ...equipment-specific fields
}

// === Card Union ===
export type Card =
  | SummonCard
  | ActionCard
  | ReactionCard
  | CounterCard
  | BuildingCard
  | QuestCard
  | AdvanceCard
  | RoleCard
  | EquipmentCard;

// === Deck Structure ===
export interface Deck {
  summonSlots: SummonSlot[];
  mainDeck: CardId[];    // Action, Reaction, Counter, Building, Quest
  advanceDeck: CardId[]; // Advance cards
}

// === Requirements, Triggers, Effects (to be expanded later) ===
export interface Requirement {
  // ...to be defined
}
export interface Trigger {
  // ...to be defined
}
export interface Effect {
  // ...to be defined
}
